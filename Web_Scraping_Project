{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "bKFlk3slQ1ol",
        "k8ptoMlNQ5zB",
        "-xHLaFLPn4yC",
        "NCWbwB1Og3bD",
        "V-qsNrtIsBEp",
        "Dam_ehZgvgmw",
        "VEg1U1uPzGoj",
        "aqzhL8STqaMX",
        "UOof6-0xFuf6",
        "8CHiu0A5RAuM",
        "edb4gsNcRJQN",
        "_RI5FD3CqFVV",
        "IrJlIsBWrO2r",
        "Mnh22VX_7f6K",
        "LYQ5acWzJRZr",
        "ev-VUSNvJ-fJ",
        "1vZLzmqcKDPX",
        "mEIt9j6RKa9B",
        "P96pGO9kRCLv",
        "hk3eSdDAXQv8",
        "XZ9nJhmiZB_W",
        "ii49LH4tdNoN",
        "mHZwwgiKdlQm",
        "uUOtDJv9gM4a",
        "nD4QVPT-nfVR",
        "CyqHHKh4IDx6",
        "0bPDbn-gPyfm",
        "N_OroblUQG4r",
        "BUPye0P0QP5I",
        "tytqsADVR2x6"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harish1254/ZOMATO_RESTAURANT_CLUSTERING/blob/main/Web_Scraping_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Web Scraping & Data Handling Challenge**"
      ],
      "metadata": {
        "id": "bKFlk3slQ1ol"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "### **Website:**\n",
        "JustWatch -  https://www.justwatch.com\n",
        "\n",
        "\n",
        "### **Description:**\n",
        "\n",
        "JustWatch is a popular platform that allows users to search for movies and TV shows across multiple streaming services like Netflix, Amazon Prime, Hulu, etc. For this assignment, you will be required to scrape movie and TV show data from JustWatch using Selenium, Python, and BeautifulSoup. Extract data from HTML, not by directly calling their APIs. Then, perform data filtering and analysis using Pandas, and finally, save the results to a CSV file.\n",
        "\n",
        "### **Tasks:**\n",
        "\n",
        "**1. Web Scraping:**\n",
        "\n",
        "Use BeautifulSoup to scrape the following data from JustWatch:\n",
        "\n",
        "   **a. Movie Information:**\n",
        "\n",
        "      - Movie title\n",
        "      - Release year\n",
        "      - Genre\n",
        "      - IMDb rating\n",
        "      - Streaming services available (Netflix, Amazon Prime, Hulu, etc.)\n",
        "      - URL to the movie page on JustWatch\n",
        "\n",
        "   **b. TV Show Information:**\n",
        "\n",
        "      - TV show title\n",
        "      - Release year\n",
        "      - Genre\n",
        "      - IMDb rating\n",
        "      - Streaming services available (Netflix, Amazon Prime, Hulu, etc.)\n",
        "      - URL to the TV show page on JustWatch\n",
        "\n",
        "  **c. Scope:**\n",
        "\n",
        "```\n",
        " ` - Scrape data for at least 50 movies and 50 TV shows.\n",
        "   - You can choose the entry point (e.g., starting with popular movies,\n",
        "     or a specific genre, etc.) to ensure a diverse dataset.`\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "**2. Data Filtering & Analysis:**\n",
        "\n",
        "   After scraping the data, use Pandas to perform the following tasks:\n",
        "\n",
        "   **a. Filter movies and TV shows based on specific criteria:**\n",
        "\n",
        "   ```\n",
        "      - Only include movies and TV shows released in the last 2 years (from the current date).\n",
        "      - Only include movies and TV shows with an IMDb rating of 7 or higher.\n",
        "```\n",
        "\n",
        "   **b. Data Analysis:**\n",
        "\n",
        "   ```\n",
        "      - Calculate the average IMDb rating for the scraped movies and TV shows.\n",
        "      - Identify the top 5 genres that have the highest number of available movies and TV shows.\n",
        "      - Determine the streaming service with the most significant number of offerings.\n",
        "      \n",
        "   ```   \n",
        "\n",
        "**3. Data Export:**\n",
        "\n",
        "```\n",
        "   - Dump the filtered and analysed data into a CSV file for further processing and reporting.\n",
        "\n",
        "   - Keep the CSV file in your Drive Folder and Share the Drive link on the colab while keeping view access with anyone.\n",
        "```\n",
        "\n",
        "**Submission:**\n",
        "```\n",
        "- Submit a link to your Colab made for the assignment.\n",
        "\n",
        "- The Colab should contain your Python script (.py format only) with clear\n",
        "  comments explaining the scraping, filtering, and analysis process.\n",
        "\n",
        "- Your Code shouldn't have any errors and should be executable at a one go.\n",
        "\n",
        "- Before Conclusion, Keep your Dataset Drive Link in the Notebook.\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "**Note:**\n",
        "\n",
        "1. Properly handle errors and exceptions during web scraping to ensure a robust script.\n",
        "\n",
        "2. Make sure your code is well-structured, easy to understand, and follows Python best practices.\n",
        "\n",
        "3. The assignment will be evaluated based on the correctness of the scraped data, accuracy of data filtering and analysis, and the overall quality of the Python code.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "YU_opgaCYpcO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Start The Project**"
      ],
      "metadata": {
        "id": "k8ptoMlNQ5zB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 1:- Web Scrapping**"
      ],
      "metadata": {
        "id": "-xHLaFLPn4yC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Installing all necessary labraries\n",
        "!pip install bs4\n",
        "!pip install requests"
      ],
      "metadata": {
        "id": "axiEsy9ZL3qd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49c4763a-0a9a-4c07-8139-a655d8fd99da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting bs4\n",
            "  Downloading bs4-0.0.2-py2.py3-none-any.whl (1.2 kB)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from bs4) (4.12.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->bs4) (2.5)\n",
            "Installing collected packages: bs4\n",
            "Successfully installed bs4-0.0.2\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.31.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.2.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import all necessary labraries\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "omJlLZASQBmU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping Movies Data**"
      ],
      "metadata": {
        "id": "NCWbwB1Og3bD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Specifying the URL from which movies related data will be fetched\n",
        "url='https://www.justwatch.com/in/movies?release_year_from=2000'\n",
        "\n",
        "# Sending an HTTP GET request to the URL\n",
        "page=requests.get(url)\n",
        "# Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "soup=BeautifulSoup(page.text,'html.parser')\n",
        "# Printing the prettified HTML content"
      ],
      "metadata": {
        "id": "nPDgza5mQJKr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Movie URL's**"
      ],
      "metadata": {
        "id": "V-qsNrtIsBEp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Set the main website URL\n",
        "main_website_url = r'https://www.justwatch.com'\n",
        "\n",
        "# Find all <a> tags with the specified class\n",
        "movies_link = soup.find_all('a', class_=\"title-list-grid__item--link\")\n",
        "\n",
        "# Initialize an empty list to store complete movie URLs\n",
        "list_of_movies_links = []\n",
        "\n",
        "# Iterate through each <a> tag in the list\n",
        "for link in movies_link:\n",
        "    # Extract the value of the href attribute (movie URL)\n",
        "    movie_url = link.get('href')\n",
        "\n",
        "    # Combine the main website URL with the movie URL and append to the list\n",
        "    list_of_movies_links.append(main_website_url + movie_url)\n",
        "\n",
        "# Print the list of complete movie URLs\n",
        "print(list_of_movies_links)\n"
      ],
      "metadata": {
        "id": "nXj9U4lshQY1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de85f6e8-8e63-43d8-f783-d8864619bf34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.justwatch.com/in/movie/dune-2021', 'https://www.justwatch.com/in/movie/oppenheimer', 'https://www.justwatch.com/in/movie/animal-2022', 'https://www.justwatch.com/in/movie/salaar', 'https://www.justwatch.com/in/movie/dunki', 'https://www.justwatch.com/in/movie/12th-fail', 'https://www.justwatch.com/in/movie/the-kerala-story', 'https://www.justwatch.com/in/movie/anyone-but-you', 'https://www.justwatch.com/in/movie/hanu-man', 'https://www.justwatch.com/in/movie/poor-things', 'https://www.justwatch.com/in/movie/sam-bahadur', 'https://www.justwatch.com/in/movie/eagle-2024', 'https://www.justwatch.com/in/movie/captain-miller', 'https://www.justwatch.com/in/movie/ssmb-28', 'https://www.justwatch.com/in/movie/article-370', 'https://www.justwatch.com/in/movie/ayalaan', 'https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film', 'https://www.justwatch.com/in/movie/merry-christmas-2024', 'https://www.justwatch.com/in/movie/fighter-2022', 'https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom', 'https://www.justwatch.com/in/movie/anatomie-dune-chute', 'https://www.justwatch.com/in/movie/jawan', 'https://www.justwatch.com/in/movie/code-8', 'https://www.justwatch.com/in/movie/anweshippin-kandethum', 'https://www.justwatch.com/in/movie/dune-part-two', 'https://www.justwatch.com/in/movie/manjummel-boys', 'https://www.justwatch.com/in/movie/upgraded', 'https://www.justwatch.com/in/movie/untitled-cord-jefferson-film', 'https://www.justwatch.com/in/movie/the-marvels', 'https://www.justwatch.com/in/movie/singapore-saloon', 'https://www.justwatch.com/in/movie/365-days', 'https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'https://www.justwatch.com/in/movie/the-beekeeper-2024', 'https://www.justwatch.com/in/movie/sound-of-freedom', 'https://www.justwatch.com/in/movie/laapataa-ladies', 'https://www.justwatch.com/in/movie/neru', 'https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'https://www.justwatch.com/in/movie/premalu', 'https://www.justwatch.com/in/movie/migration', 'https://www.justwatch.com/in/movie/the-zone-of-interest', 'https://www.justwatch.com/in/movie/bramayugam', 'https://www.justwatch.com/in/movie/past-lives', 'https://www.justwatch.com/in/movie/bhakshak', 'https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'https://www.justwatch.com/in/movie/the-holdovers', 'https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'https://www.justwatch.com/in/movie/blue-star', 'https://www.justwatch.com/in/movie/damsel-2023', 'https://www.justwatch.com/in/movie/code-8-part-ii', 'https://www.justwatch.com/in/movie/nani30', 'https://www.justwatch.com/in/movie/barbie-2023', 'https://www.justwatch.com/in/movie/junior-2023', 'https://www.justwatch.com/in/movie/abraham-ozler', 'https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'https://www.justwatch.com/in/movie/godzilla-minus-one', 'https://www.justwatch.com/in/movie/blackberry', 'https://www.justwatch.com/in/movie/interstellar', 'https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'https://www.justwatch.com/in/movie/aatmapamphlet', 'https://www.justwatch.com/in/movie/saba-nayagan', 'https://www.justwatch.com/in/movie/hacksaw-ridge', 'https://www.justwatch.com/in/movie/mission-impossible-7', 'https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'https://www.justwatch.com/in/movie/naadu', 'https://www.justwatch.com/in/movie/naa-saami-ranga', 'https://www.justwatch.com/in/movie/route-no-17', 'https://www.justwatch.com/in/movie/leo-2023', 'https://www.justwatch.com/in/movie/napoleon-2023', 'https://www.justwatch.com/in/movie/warning-2', 'https://www.justwatch.com/in/movie/deadpool', 'https://www.justwatch.com/in/movie/parking-2023', 'https://www.justwatch.com/in/movie/fast-x', 'https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'https://www.justwatch.com/in/movie/society-of-the-snow', 'https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'https://www.justwatch.com/in/movie/wonka', 'https://www.justwatch.com/in/movie/tiger-3', 'https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'https://www.justwatch.com/in/movie/one-day', 'https://www.justwatch.com/in/movie/spaceman-2022', 'https://www.justwatch.com/in/movie/snatch', 'https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'https://www.justwatch.com/in/movie/blue-beetle', 'https://www.justwatch.com/in/movie/777-charlie', 'https://www.justwatch.com/in/movie/tumbbad', 'https://www.justwatch.com/in/movie/gadar-2', 'https://www.justwatch.com/in/movie/dada-2023', 'https://www.justwatch.com/in/movie/saltburn', 'https://www.justwatch.com/in/movie/the-flash', 'https://www.justwatch.com/in/movie/kung-fu-panda', 'https://www.justwatch.com/in/movie/blade-runner-2049', 'https://www.justwatch.com/in/movie/pushpa', 'https://www.justwatch.com/in/movie/allied', 'https://www.justwatch.com/in/movie/spider-man-no-way-home', 'https://www.justwatch.com/in/movie/talk-to-me-2022', 'https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'https://www.justwatch.com/in/movie/kaathal-the-core', 'https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping Movie Title**"
      ],
      "metadata": {
        "id": "Dam_ehZgvgmw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "\n",
        "# Initialize an empty list to store movie titles\n",
        "list_of_movies_title = []\n",
        "\n",
        "# Iterate through each movie link in the list (list_of_movies_links)\n",
        "for link in list_of_movies_links:\n",
        "    # Set the current URL\n",
        "    url_from_list = link\n",
        "\n",
        "    # Sending an HTTP GET request to the URL\n",
        "    page = requests.get(url_from_list)\n",
        "\n",
        "    # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "    soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "    # Find the movie title (assuming it's in an <h1> tag)\n",
        "    movie_title = soup.find('h1')\n",
        "\n",
        "    # Check if the <h1> tag is found\n",
        "    if movie_title:\n",
        "        # Append the text content of the <h1> tag to the list\n",
        "        list_of_movies_title.append(movie_title.text.strip())\n",
        "    else:\n",
        "        # If <h1> tag is not found, add a placeholder to the list\n",
        "        list_of_movies_title.append(f\"Title not found for {url}\")\n",
        "\n",
        "# Print the list of extracted movie titles\n",
        "print(list_of_movies_title)\n"
      ],
      "metadata": {
        "id": "1FGDXRKQxd1s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d9ab24f-8fd9-4749-87ee-eb05669248d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Dune  (2021)', 'Oppenheimer  (2023)', 'Animal  (2023)', 'Salaar  (2023)', 'Dunki  (2023)', '12th Fail  (2023)', 'The Kerala Story  (2023)', 'Anyone But You  (2023)', 'Hanu-Man  (2024)', 'Poor Things  (2023)', 'Sam Bahadur  (2023)', 'Eagle  (2024)', 'Captain Miller  (2024)', 'Guntur Kaaram  (2024)', 'Article 370  (2024)', 'Ayalaan  (2024)', 'Teri Baaton Mein Aisa Uljha Jiya  (2024)', 'Merry Christmas  (2024)', 'Fighter  (2024)', 'Aquaman and the Lost Kingdom  (2023)', 'Anatomy of a Fall  (2023)', 'Jawan  (2023)', 'Code 8  (2019)', 'Anweshippin Kandethum  (2024)', 'Dune: Part Two  (2024)', 'Manjummel Boys  (2024)', 'Upgraded  (2024)', 'American Fiction  (2023)', 'The Marvels  (2023)', 'Singapore Saloon  (2024)', '365 Days  (2020)', 'Crakk: Jeetega... Toh Jiyegaa  (2024)', 'The Beekeeper  (2024)', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'The Zone of Interest  (2023)', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Uri: The Surgical Strike  (2019)', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Gadar 2  (2023)', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000', 'Title not found for https://www.justwatch.com/in/movies?release_year_from=2000']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping release Year**"
      ],
      "metadata": {
        "id": "VEg1U1uPzGoj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store release years\n",
        "list_of_release_years = []\n",
        "\n",
        "# Iterate through each movie link in the list (list_of_movies_links)\n",
        "for link in list_of_movies_links:\n",
        "    # Set the current URL\n",
        "    url_of_movie = link\n",
        "\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(url_of_movie)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the release year which is in <span class=\"text-muted\"> on the movie's page\n",
        "        release_year_tag = soup.find('span', class_=\"text-muted\")\n",
        "\n",
        "        # Check if the <span> tag is found\n",
        "        if release_year_tag:\n",
        "            # Extract the text content of the <span> tag and replace parentheses with an empty string\n",
        "            release_year = release_year_tag.text.replace('(', '').replace(')', '').strip()\n",
        "            list_of_release_years.append(release_year)\n",
        "        else:\n",
        "            # If <span> tag is not found, add a placeholder to the list\n",
        "            list_of_release_years.append(f\"Release year not found for {url_of_movie}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {url_of_movie}: {req_ex}\")\n",
        "        list_of_release_years.append(f\"Error fetching {url_of_movie}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {url_of_movie}: {ex}\")\n",
        "        list_of_release_years.append(f\"Error processing {url_of_movie}\")\n",
        "\n",
        "# Print the list of extracted release years without parentheses\n",
        "print(list_of_release_years)\n"
      ],
      "metadata": {
        "id": "wLqLKOvP5Gmt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76436ea7-2b7d-4196-a678-dbb798a19176"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/sound-of-freedom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sound-of-freedom\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/migration: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/migration\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/malaikottai-vaaliban\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/godzilla-minus-one\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hacksaw-ridge\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/uri-the-surgical-strike\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/route-no-17: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/route-no-17\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/warning-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/warning-2\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-peanut-butter-falcon\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/777-charlie: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/777-charlie\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/kung-fu-panda: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kung-fu-panda\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['2021', '2023', '2023', '2023', '2023', '2023', '2023', '2023', '2024', '2023', '2023', '2024', '2024', '2024', '2024', '2024', '2024', '2024', '2024', '2023', '2023', '2023', '2019', '2024', '2024', '2024', '2024', '2023', '2023', '2024', '2020', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Error fetching https://www.justwatch.com/in/movie/sound-of-freedom', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', 'Error fetching https://www.justwatch.com/in/movie/migration', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', '2024', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', 'Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', 'Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Error fetching https://www.justwatch.com/in/movie/route-no-17', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'Error fetching https://www.justwatch.com/in/movie/warning-2', '2016', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', 'Error fetching https://www.justwatch.com/in/movie/777-charlie', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Error fetching https://www.justwatch.com/in/movie/kung-fu-panda', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', '2021', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping Genres**"
      ],
      "metadata": {
        "id": "aqzhL8STqaMX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store genres\n",
        "list_of_genres = []\n",
        "\n",
        "# Iterate through each movie link in the list (list_of_movies_links)\n",
        "for link in list_of_movies_links:\n",
        "    # Set the current URL\n",
        "    url_of_movie = link\n",
        "\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(url_of_movie)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the <h3> tag containing \"Genres\"\n",
        "        genres_heading = soup.find('h3', class_=\"detail-infos__subheading\", string=\"Genres\")\n",
        "\n",
        "        # Check if the <h3> tag is found\n",
        "        if genres_heading:\n",
        "            # Extract the next sibling <div> tag (which contains the genres)\n",
        "            genres_div = genres_heading.find_next('div', class_=\"detail-infos__value\")\n",
        "            if genres_div:\n",
        "                # Extract the text content of the <div> tag and strip extra whitespaces\n",
        "                genres = genres_div.text.strip()\n",
        "                list_of_genres.append(genres)\n",
        "            else:\n",
        "                list_of_genres.append(f\"Genres not found for {url_of_movie}\")\n",
        "        else:\n",
        "            list_of_genres.append(f\"Genres heading not found for {url_of_movie}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {url_of_movie}: {req_ex}\")\n",
        "        list_of_genres.append(f\"Error fetching {url_of_movie}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {url_of_movie}: {ex}\")\n",
        "        list_of_genres.append(f\"Error processing {url_of_movie}\")\n",
        "\n",
        "# Print the list of extracted genres\n",
        "print(list_of_genres)\n"
      ],
      "metadata": {
        "id": "NYGVsfKjrDWr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a24f36d3-4a84-4b33-97d9-2051229643f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/poor-things: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/poor-things\n",
            "Error fetching https://www.justwatch.com/in/movie/sam-bahadur: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sam-bahadur\n",
            "Error fetching https://www.justwatch.com/in/movie/eagle-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/eagle-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/captain-miller: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/captain-miller\n",
            "Error fetching https://www.justwatch.com/in/movie/ssmb-28: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ssmb-28\n",
            "Error fetching https://www.justwatch.com/in/movie/article-370: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/article-370\n",
            "Error fetching https://www.justwatch.com/in/movie/ayalaan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ayalaan\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film\n",
            "Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/merry-christmas-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/fighter-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fighter-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anatomie-dune-chute\n",
            "Error fetching https://www.justwatch.com/in/movie/jawan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/jawan\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8\n",
            "Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anweshippin-kandethum\n",
            "Error fetching https://www.justwatch.com/in/movie/dune-part-two: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dune-part-two\n",
            "Error fetching https://www.justwatch.com/in/movie/manjummel-boys: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/manjummel-boys\n",
            "Error fetching https://www.justwatch.com/in/movie/upgraded: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/upgraded\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-cord-jefferson-film\n",
            "Error fetching https://www.justwatch.com/in/movie/the-marvels: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-marvels\n",
            "Error fetching https://www.justwatch.com/in/movie/singapore-saloon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/singapore-saloon\n",
            "Error fetching https://www.justwatch.com/in/movie/365-days: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/365-days\n",
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/sound-of-freedom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sound-of-freedom\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/migration: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/migration\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-star: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-star\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/godzilla-minus-one\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hacksaw-ridge\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/uri-the-surgical-strike\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/warning-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/warning-2\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-peanut-butter-falcon\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/777-charlie: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/777-charlie\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spider-man-no-way-home\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['Science-Fiction, Action & Adventure, Drama', 'Drama, History', 'Action & Adventure, Crime, Drama, Mystery & Thriller', 'Drama, Mystery & Thriller, Action & Adventure, Crime', 'Comedy, Drama', 'Drama, History', 'Drama', 'Comedy, Romance', 'Comedy, Fantasy, Action & Adventure', 'Error fetching https://www.justwatch.com/in/movie/poor-things', 'Error fetching https://www.justwatch.com/in/movie/sam-bahadur', 'Error fetching https://www.justwatch.com/in/movie/eagle-2024', 'Error fetching https://www.justwatch.com/in/movie/captain-miller', 'Error fetching https://www.justwatch.com/in/movie/ssmb-28', 'Error fetching https://www.justwatch.com/in/movie/article-370', 'Error fetching https://www.justwatch.com/in/movie/ayalaan', 'Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film', 'Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024', 'Error fetching https://www.justwatch.com/in/movie/fighter-2022', 'Action & Adventure, Fantasy, Science-Fiction', 'Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute', 'Error fetching https://www.justwatch.com/in/movie/jawan', 'Error fetching https://www.justwatch.com/in/movie/code-8', 'Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum', 'Error fetching https://www.justwatch.com/in/movie/dune-part-two', 'Error fetching https://www.justwatch.com/in/movie/manjummel-boys', 'Error fetching https://www.justwatch.com/in/movie/upgraded', 'Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film', 'Error fetching https://www.justwatch.com/in/movie/the-marvels', 'Error fetching https://www.justwatch.com/in/movie/singapore-saloon', 'Error fetching https://www.justwatch.com/in/movie/365-days', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Error fetching https://www.justwatch.com/in/movie/sound-of-freedom', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', 'Error fetching https://www.justwatch.com/in/movie/migration', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Drama, Fantasy, Action & Adventure, Western, Mystery & Thriller', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'Error fetching https://www.justwatch.com/in/movie/blue-star', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', 'Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', 'Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Drama, Mystery & Thriller', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'Error fetching https://www.justwatch.com/in/movie/warning-2', 'Error fetching https://www.justwatch.com/in/movie/deadpool', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', 'Error fetching https://www.justwatch.com/in/movie/777-charlie', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Kids & Family, Comedy, Action & Adventure, Animation, Fantasy', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', 'Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping IMBD Rating**"
      ],
      "metadata": {
        "id": "UOof6-0xFuf6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store ratings\n",
        "list_of_ratings = []\n",
        "\n",
        "# Iterate through each movie link in the list\n",
        "for link in list_of_movies_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(link)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the img tag with alt attribute 'IMDB'\n",
        "        imdb_img = soup.find('img', alt=re.compile(r'IMDB'))\n",
        "\n",
        "        if imdb_img:\n",
        "            # Extract IMDb rating from the following sibling span\n",
        "            imdb_rating_span = imdb_img.find_next('span')\n",
        "            imdb_rating = re.search(r'\\d+\\.\\d+', imdb_rating_span.get_text()).group()\n",
        "            list_of_ratings.append(imdb_rating)\n",
        "        else:\n",
        "            list_of_ratings.append(\"IMDb Rating not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {link}: {req_ex}\")\n",
        "        list_of_ratings.append(f\"Error fetching {link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {link}: {ex}\")\n",
        "        list_of_ratings.append(f\"Error processing {link}\")\n",
        "\n",
        "# Print the list of extracted IMDb ratings\n",
        "print(list_of_ratings)\n"
      ],
      "metadata": {
        "id": "gW467MLx6aCH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d01a2baa-e3c0-4d3b-f0f2-ad608431bfd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/sound-of-freedom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sound-of-freedom\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/malaikottai-vaaliban\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-star: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-star\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/godzilla-minus-one\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hacksaw-ridge\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/route-no-17: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/route-no-17\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/warning-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/warning-2\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-peanut-butter-falcon\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/kung-fu-panda: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kung-fu-panda\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spider-man-no-way-home\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['8.0', '8.4', '6.3', '6.5', '6.8', '9.1', '7.0', '6.2', '8.4', '8.1', '7.8', '6.8', '6.6', '5.4', '8.5', '6.0', '7.0', '7.3', '6.9', '5.6', '7.8', '7.0', '6.1', '7.7', '8.9', '8.7', '6.1', '7.6', 'IMDb Rating not found', '6.2', '3.3', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Error fetching https://www.justwatch.com/in/movie/sound-of-freedom', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', '6.7', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'Error fetching https://www.justwatch.com/in/movie/blue-star', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', 'Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', '8.2', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Error fetching https://www.justwatch.com/in/movie/route-no-17', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'Error fetching https://www.justwatch.com/in/movie/warning-2', 'Error fetching https://www.justwatch.com/in/movie/deadpool', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', '8.7', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Error fetching https://www.justwatch.com/in/movie/kung-fu-panda', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', 'Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping Runtime/Duration**"
      ],
      "metadata": {
        "id": "8CHiu0A5RAuM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store runtimes\n",
        "list_of_runtimes = []\n",
        "\n",
        "# Iterate through each movie link in the list\n",
        "for link in list_of_movies_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(link)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the <h3> tag containing \"Runtime\"\n",
        "        runtime_heading = soup.find('h3', class_='detail-infos__subheading', string='Runtime')\n",
        "\n",
        "        if runtime_heading:\n",
        "            # Extract the runtime from the following sibling div\n",
        "            runtime_div = runtime_heading.find_next('div', class_='detail-infos__value')\n",
        "            runtime = runtime_div.get_text(strip=True)\n",
        "            list_of_runtimes.append(runtime)\n",
        "        else:\n",
        "            list_of_runtimes.append(\"Runtime not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {link}: {req_ex}\")\n",
        "        list_of_runtimes.append(f\"Error fetching {link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {link}: {ex}\")\n",
        "        list_of_runtimes.append(f\"Error processing {link}\")\n",
        "\n",
        "# Print the list of extracted runtimes\n",
        "print(list_of_runtimes)\n"
      ],
      "metadata": {
        "id": "si_yaGO8OTBo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3024cd5-c10e-4ea7-bf33-555c92ce5cbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/salaar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/salaar\n",
            "Error fetching https://www.justwatch.com/in/movie/dunki: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dunki\n",
            "Error fetching https://www.justwatch.com/in/movie/12th-fail: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/12th-fail\n",
            "Error fetching https://www.justwatch.com/in/movie/the-kerala-story: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-kerala-story\n",
            "Error fetching https://www.justwatch.com/in/movie/anyone-but-you: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anyone-but-you\n",
            "Error fetching https://www.justwatch.com/in/movie/hanu-man: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hanu-man\n",
            "Error fetching https://www.justwatch.com/in/movie/poor-things: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/poor-things\n",
            "Error fetching https://www.justwatch.com/in/movie/sam-bahadur: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sam-bahadur\n",
            "Error fetching https://www.justwatch.com/in/movie/eagle-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/eagle-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/captain-miller: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/captain-miller\n",
            "Error fetching https://www.justwatch.com/in/movie/article-370: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/article-370\n",
            "Error fetching https://www.justwatch.com/in/movie/ayalaan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ayalaan\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film\n",
            "Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/merry-christmas-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/fighter-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fighter-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom\n",
            "Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anatomie-dune-chute\n",
            "Error fetching https://www.justwatch.com/in/movie/jawan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/jawan\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8\n",
            "Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anweshippin-kandethum\n",
            "Error fetching https://www.justwatch.com/in/movie/dune-part-two: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dune-part-two\n",
            "Error fetching https://www.justwatch.com/in/movie/manjummel-boys: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/manjummel-boys\n",
            "Error fetching https://www.justwatch.com/in/movie/upgraded: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/upgraded\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-cord-jefferson-film\n",
            "Error fetching https://www.justwatch.com/in/movie/the-marvels: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-marvels\n",
            "Error fetching https://www.justwatch.com/in/movie/singapore-saloon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/singapore-saloon\n",
            "Error fetching https://www.justwatch.com/in/movie/365-days: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/365-days\n",
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/sound-of-freedom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sound-of-freedom\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/malaikottai-vaaliban\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-star: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-star\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/godzilla-minus-one\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/uri-the-surgical-strike\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/route-no-17: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/route-no-17\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/warning-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/warning-2\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-peanut-butter-falcon\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/kung-fu-panda: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kung-fu-panda\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spider-man-no-way-home\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['2h 35min', '3h 0min', '3h 21min', 'Error fetching https://www.justwatch.com/in/movie/salaar', 'Error fetching https://www.justwatch.com/in/movie/dunki', 'Error fetching https://www.justwatch.com/in/movie/12th-fail', 'Error fetching https://www.justwatch.com/in/movie/the-kerala-story', 'Error fetching https://www.justwatch.com/in/movie/anyone-but-you', 'Error fetching https://www.justwatch.com/in/movie/hanu-man', 'Error fetching https://www.justwatch.com/in/movie/poor-things', 'Error fetching https://www.justwatch.com/in/movie/sam-bahadur', 'Error fetching https://www.justwatch.com/in/movie/eagle-2024', 'Error fetching https://www.justwatch.com/in/movie/captain-miller', '2h 39min', 'Error fetching https://www.justwatch.com/in/movie/article-370', 'Error fetching https://www.justwatch.com/in/movie/ayalaan', 'Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film', 'Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024', 'Error fetching https://www.justwatch.com/in/movie/fighter-2022', 'Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom', 'Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute', 'Error fetching https://www.justwatch.com/in/movie/jawan', 'Error fetching https://www.justwatch.com/in/movie/code-8', 'Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum', 'Error fetching https://www.justwatch.com/in/movie/dune-part-two', 'Error fetching https://www.justwatch.com/in/movie/manjummel-boys', 'Error fetching https://www.justwatch.com/in/movie/upgraded', 'Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film', 'Error fetching https://www.justwatch.com/in/movie/the-marvels', 'Error fetching https://www.justwatch.com/in/movie/singapore-saloon', 'Error fetching https://www.justwatch.com/in/movie/365-days', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Error fetching https://www.justwatch.com/in/movie/sound-of-freedom', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', '1h 23min', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'Error fetching https://www.justwatch.com/in/movie/blue-star', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', '2h 19min', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', 'Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Error fetching https://www.justwatch.com/in/movie/route-no-17', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'Error fetching https://www.justwatch.com/in/movie/warning-2', 'Error fetching https://www.justwatch.com/in/movie/deadpool', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', '2h 46min', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Error fetching https://www.justwatch.com/in/movie/kung-fu-panda', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', 'Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scrapping Age Rating**"
      ],
      "metadata": {
        "id": "edb4gsNcRJQN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store age ratings\n",
        "list_of_age_ratings = []\n",
        "\n",
        "# Iterate through each movie link in the list\n",
        "for link in list_of_movies_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(link)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the h3 tag with class 'detail-infos__subheading' and text 'Age rating'\n",
        "        age_rating_heading = soup.find('h3', class_='detail-infos__subheading', string='Age rating')\n",
        "\n",
        "        if age_rating_heading:\n",
        "            # Extract age rating from the following sibling div\n",
        "            age_rating = age_rating_heading.find_next('div', class_='detail-infos__value').get_text(strip=True)\n",
        "            list_of_age_ratings.append(age_rating)\n",
        "        else:\n",
        "            list_of_age_ratings.append(\"Age rating not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {link}: {req_ex}\")\n",
        "        list_of_age_ratings.append(f\"Error fetching {link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {link}: {ex}\")\n",
        "        list_of_age_ratings.append(f\"Error processing {link}\")\n",
        "\n",
        "# Print the list of extracted age ratings\n",
        "print(list_of_age_ratings)\n"
      ],
      "metadata": {
        "id": "ZsHskhOcNAUj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f79d54e9-8afa-421d-a6ba-2fe4d5a95413"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/animal-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/animal-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/salaar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/salaar\n",
            "Error fetching https://www.justwatch.com/in/movie/dunki: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dunki\n",
            "Error fetching https://www.justwatch.com/in/movie/12th-fail: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/12th-fail\n",
            "Error fetching https://www.justwatch.com/in/movie/the-kerala-story: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-kerala-story\n",
            "Error fetching https://www.justwatch.com/in/movie/anyone-but-you: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anyone-but-you\n",
            "Error fetching https://www.justwatch.com/in/movie/poor-things: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/poor-things\n",
            "Error fetching https://www.justwatch.com/in/movie/sam-bahadur: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sam-bahadur\n",
            "Error fetching https://www.justwatch.com/in/movie/eagle-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/eagle-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/captain-miller: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/captain-miller\n",
            "Error fetching https://www.justwatch.com/in/movie/ssmb-28: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ssmb-28\n",
            "Error fetching https://www.justwatch.com/in/movie/article-370: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/article-370\n",
            "Error fetching https://www.justwatch.com/in/movie/ayalaan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ayalaan\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film\n",
            "Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/merry-christmas-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/fighter-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fighter-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom\n",
            "Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anatomie-dune-chute\n",
            "Error fetching https://www.justwatch.com/in/movie/jawan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/jawan\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8\n",
            "Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anweshippin-kandethum\n",
            "Error fetching https://www.justwatch.com/in/movie/dune-part-two: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dune-part-two\n",
            "Error fetching https://www.justwatch.com/in/movie/manjummel-boys: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/manjummel-boys\n",
            "Error fetching https://www.justwatch.com/in/movie/upgraded: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/upgraded\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-cord-jefferson-film\n",
            "Error fetching https://www.justwatch.com/in/movie/the-marvels: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-marvels\n",
            "Error fetching https://www.justwatch.com/in/movie/singapore-saloon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/singapore-saloon\n",
            "Error fetching https://www.justwatch.com/in/movie/365-days: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/365-days\n",
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/migration: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/migration\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/malaikottai-vaaliban\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-star: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-star\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hacksaw-ridge\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/uri-the-surgical-strike\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/route-no-17: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/route-no-17\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/warning-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/warning-2\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/777-charlie: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/777-charlie\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/kung-fu-panda: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kung-fu-panda\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spider-man-no-way-home\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['UA', 'UA', 'Error fetching https://www.justwatch.com/in/movie/animal-2022', 'Error fetching https://www.justwatch.com/in/movie/salaar', 'Error fetching https://www.justwatch.com/in/movie/dunki', 'Error fetching https://www.justwatch.com/in/movie/12th-fail', 'Error fetching https://www.justwatch.com/in/movie/the-kerala-story', 'Error fetching https://www.justwatch.com/in/movie/anyone-but-you', 'UA', 'Error fetching https://www.justwatch.com/in/movie/poor-things', 'Error fetching https://www.justwatch.com/in/movie/sam-bahadur', 'Error fetching https://www.justwatch.com/in/movie/eagle-2024', 'Error fetching https://www.justwatch.com/in/movie/captain-miller', 'Error fetching https://www.justwatch.com/in/movie/ssmb-28', 'Error fetching https://www.justwatch.com/in/movie/article-370', 'Error fetching https://www.justwatch.com/in/movie/ayalaan', 'Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film', 'Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024', 'Error fetching https://www.justwatch.com/in/movie/fighter-2022', 'Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom', 'Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute', 'Error fetching https://www.justwatch.com/in/movie/jawan', 'Error fetching https://www.justwatch.com/in/movie/code-8', 'Error fetching https://www.justwatch.com/in/movie/anweshippin-kandethum', 'Error fetching https://www.justwatch.com/in/movie/dune-part-two', 'Error fetching https://www.justwatch.com/in/movie/manjummel-boys', 'Error fetching https://www.justwatch.com/in/movie/upgraded', 'Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film', 'Error fetching https://www.justwatch.com/in/movie/the-marvels', 'Error fetching https://www.justwatch.com/in/movie/singapore-saloon', 'Error fetching https://www.justwatch.com/in/movie/365-days', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Age rating not found', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', 'Error fetching https://www.justwatch.com/in/movie/migration', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'Error fetching https://www.justwatch.com/in/movie/blue-star', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Age rating not found', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', 'Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', 'Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Error fetching https://www.justwatch.com/in/movie/route-no-17', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'Error fetching https://www.justwatch.com/in/movie/warning-2', 'Error fetching https://www.justwatch.com/in/movie/deadpool', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Age rating not found', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', 'Error fetching https://www.justwatch.com/in/movie/777-charlie', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Error fetching https://www.justwatch.com/in/movie/kung-fu-panda', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', 'Error fetching https://www.justwatch.com/in/movie/spider-man-no-way-home', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Production Countries Details**"
      ],
      "metadata": {
        "id": "_RI5FD3CqFVV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import re\n",
        "\n",
        "# Initialize an empty list to store production countries\n",
        "list_of_production_countries = []\n",
        "\n",
        "# Iterate through each movie link in the list\n",
        "for link in list_of_movies_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(link)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the h3 tag with class 'detail-infos__subheading' and text 'Production country'\n",
        "        production_country_heading = soup.find('h3', class_='detail-infos__subheading', string=re.compile(r'Production\\s*country', re.I))\n",
        "\n",
        "        if production_country_heading:\n",
        "            # Extract production country from the following sibling div\n",
        "            production_country = production_country_heading.find_next('div', class_='detail-infos__value').get_text(strip=True)\n",
        "            list_of_production_countries.append(production_country)\n",
        "        else:\n",
        "            list_of_production_countries.append(\"Production country not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {link}: {req_ex}\")\n",
        "        list_of_production_countries.append(f\"Error fetching {link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {link}: {ex}\")\n",
        "        list_of_production_countries.append(f\"Error processing {link}\")\n",
        "\n",
        "# Print the list of extracted production countries\n",
        "print(list_of_production_countries)"
      ],
      "metadata": {
        "id": "ai6YOgZmYIcc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dce197a4-6de2-4398-c304-7b3d41c85747"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error fetching https://www.justwatch.com/in/movie/ayalaan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/ayalaan\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film\n",
            "Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/merry-christmas-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/fighter-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fighter-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom\n",
            "Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/anatomie-dune-chute\n",
            "Error fetching https://www.justwatch.com/in/movie/jawan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/jawan\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8\n",
            "Error fetching https://www.justwatch.com/in/movie/dune-part-two: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dune-part-two\n",
            "Error fetching https://www.justwatch.com/in/movie/manjummel-boys: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/manjummel-boys\n",
            "Error fetching https://www.justwatch.com/in/movie/upgraded: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/upgraded\n",
            "Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/untitled-cord-jefferson-film\n",
            "Error fetching https://www.justwatch.com/in/movie/the-marvels: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-marvels\n",
            "Error fetching https://www.justwatch.com/in/movie/singapore-saloon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/singapore-saloon\n",
            "Error fetching https://www.justwatch.com/in/movie/365-days: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/365-days\n",
            "Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa\n",
            "Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-beekeeper-2024\n",
            "Error fetching https://www.justwatch.com/in/movie/sound-of-freedom: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sound-of-freedom\n",
            "Error fetching https://www.justwatch.com/in/movie/laapataa-ladies: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/laapataa-ladies\n",
            "Error fetching https://www.justwatch.com/in/movie/neru: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/neru\n",
            "Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone\n",
            "Error fetching https://www.justwatch.com/in/movie/premalu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/premalu\n",
            "Error fetching https://www.justwatch.com/in/movie/migration: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/migration\n",
            "Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-zone-of-interest\n",
            "Error fetching https://www.justwatch.com/in/movie/bramayugam: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bramayugam\n",
            "Error fetching https://www.justwatch.com/in/movie/past-lives: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/past-lives\n",
            "Error fetching https://www.justwatch.com/in/movie/bhakshak: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/bhakshak\n",
            "Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/malaikottai-vaaliban\n",
            "Error fetching https://www.justwatch.com/in/movie/the-holdovers: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-holdovers\n",
            "Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/killers-of-the-flower-moon\n",
            "Error fetching https://www.justwatch.com/in/movie/damsel-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/damsel-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/code-8-part-ii: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/code-8-part-ii\n",
            "Error fetching https://www.justwatch.com/in/movie/nani30: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/nani30\n",
            "Error fetching https://www.justwatch.com/in/movie/barbie-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/barbie-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/junior-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/junior-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/abraham-ozler: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/abraham-ozler\n",
            "Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b\n",
            "Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-wolf-of-wall-street\n",
            "Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/godzilla-minus-one\n",
            "Error fetching https://www.justwatch.com/in/movie/blackberry: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blackberry\n",
            "Error fetching https://www.justwatch.com/in/movie/interstellar: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/interstellar\n",
            "Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/k-g-f-chapter-1\n",
            "Error fetching https://www.justwatch.com/in/movie/aatmapamphlet: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/aatmapamphlet\n",
            "Error fetching https://www.justwatch.com/in/movie/saba-nayagan: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saba-nayagan\n",
            "Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/hacksaw-ridge\n",
            "Error fetching https://www.justwatch.com/in/movie/mission-impossible-7: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/mission-impossible-7\n",
            "Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/uri-the-surgical-strike\n",
            "Error fetching https://www.justwatch.com/in/movie/naadu: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naadu\n",
            "Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/naa-saami-ranga\n",
            "Error fetching https://www.justwatch.com/in/movie/route-no-17: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/route-no-17\n",
            "Error fetching https://www.justwatch.com/in/movie/leo-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/leo-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/napoleon-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/napoleon-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool\n",
            "Error fetching https://www.justwatch.com/in/movie/parking-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/parking-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/fast-x: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/fast-x\n",
            "Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke\n",
            "Error fetching https://www.justwatch.com/in/movie/society-of-the-snow: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/society-of-the-snow\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-nageswara-rao\n",
            "Error fetching https://www.justwatch.com/in/movie/wonka: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/wonka\n",
            "Error fetching https://www.justwatch.com/in/movie/tiger-3: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tiger-3\n",
            "Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-peanut-butter-falcon\n",
            "Error fetching https://www.justwatch.com/in/movie/one-day: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/one-day\n",
            "Error fetching https://www.justwatch.com/in/movie/spaceman-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/spaceman-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/snatch: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/snatch\n",
            "Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/vadakkupatti-ramasamy\n",
            "Error fetching https://www.justwatch.com/in/movie/blue-beetle: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blue-beetle\n",
            "Error fetching https://www.justwatch.com/in/movie/777-charlie: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/777-charlie\n",
            "Error fetching https://www.justwatch.com/in/movie/tumbbad: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/tumbbad\n",
            "Error fetching https://www.justwatch.com/in/movie/gadar-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/gadar-2\n",
            "Error fetching https://www.justwatch.com/in/movie/dada-2023: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dada-2023\n",
            "Error fetching https://www.justwatch.com/in/movie/saltburn: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/saltburn\n",
            "Error fetching https://www.justwatch.com/in/movie/the-flash: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/the-flash\n",
            "Error fetching https://www.justwatch.com/in/movie/kung-fu-panda: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kung-fu-panda\n",
            "Error fetching https://www.justwatch.com/in/movie/blade-runner-2049: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/blade-runner-2049\n",
            "Error fetching https://www.justwatch.com/in/movie/pushpa: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/pushpa\n",
            "Error fetching https://www.justwatch.com/in/movie/allied: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/allied\n",
            "Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/talk-to-me-2022\n",
            "Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani\n",
            "Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/dziewczyny-z-dubaju\n",
            "Error fetching https://www.justwatch.com/in/movie/kaathal-the-core: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/kaathal-the-core\n",
            "Error fetching https://www.justwatch.com/in/movie/deadpool-2: 429 Client Error: Too Many Requests for url: https://www.justwatch.com/in/movie/deadpool-2\n",
            "['United States', 'United States, United Kingdom', 'India', 'India', 'India', 'India', 'India', 'United States, Australia', 'India', 'Ireland, United Kingdom, United States', 'India', 'India', 'India', 'India', 'India', 'Error fetching https://www.justwatch.com/in/movie/ayalaan', 'Error fetching https://www.justwatch.com/in/movie/untitled-shahid-kapoor-kriti-sanon-film', 'Error fetching https://www.justwatch.com/in/movie/merry-christmas-2024', 'Error fetching https://www.justwatch.com/in/movie/fighter-2022', 'Error fetching https://www.justwatch.com/in/movie/aquaman-and-the-lost-kingdom', 'Error fetching https://www.justwatch.com/in/movie/anatomie-dune-chute', 'Error fetching https://www.justwatch.com/in/movie/jawan', 'Error fetching https://www.justwatch.com/in/movie/code-8', 'India', 'Error fetching https://www.justwatch.com/in/movie/dune-part-two', 'Error fetching https://www.justwatch.com/in/movie/manjummel-boys', 'Error fetching https://www.justwatch.com/in/movie/upgraded', 'Error fetching https://www.justwatch.com/in/movie/untitled-cord-jefferson-film', 'Error fetching https://www.justwatch.com/in/movie/the-marvels', 'Error fetching https://www.justwatch.com/in/movie/singapore-saloon', 'Error fetching https://www.justwatch.com/in/movie/365-days', 'Error fetching https://www.justwatch.com/in/movie/crakk-jeetegaa-toh-jiyegaa', 'Error fetching https://www.justwatch.com/in/movie/the-beekeeper-2024', 'Error fetching https://www.justwatch.com/in/movie/sound-of-freedom', 'Error fetching https://www.justwatch.com/in/movie/laapataa-ladies', 'Error fetching https://www.justwatch.com/in/movie/neru', 'Error fetching https://www.justwatch.com/in/movie/harry-potter-and-the-philosophers-stone', 'Error fetching https://www.justwatch.com/in/movie/premalu', 'Error fetching https://www.justwatch.com/in/movie/migration', 'Error fetching https://www.justwatch.com/in/movie/the-zone-of-interest', 'Error fetching https://www.justwatch.com/in/movie/bramayugam', 'Error fetching https://www.justwatch.com/in/movie/past-lives', 'Error fetching https://www.justwatch.com/in/movie/bhakshak', 'Error fetching https://www.justwatch.com/in/movie/malaikottai-vaaliban', 'Error fetching https://www.justwatch.com/in/movie/the-holdovers', 'Error fetching https://www.justwatch.com/in/movie/killers-of-the-flower-moon', 'India', 'Error fetching https://www.justwatch.com/in/movie/damsel-2023', 'Error fetching https://www.justwatch.com/in/movie/code-8-part-ii', 'Error fetching https://www.justwatch.com/in/movie/nani30', 'Error fetching https://www.justwatch.com/in/movie/barbie-2023', 'Error fetching https://www.justwatch.com/in/movie/junior-2023', 'Error fetching https://www.justwatch.com/in/movie/abraham-ozler', 'Error fetching https://www.justwatch.com/in/movie/sapta-sagaradaache-ello-side-b', 'Error fetching https://www.justwatch.com/in/movie/the-wolf-of-wall-street', 'Error fetching https://www.justwatch.com/in/movie/godzilla-minus-one', 'Error fetching https://www.justwatch.com/in/movie/blackberry', 'Error fetching https://www.justwatch.com/in/movie/interstellar', 'Error fetching https://www.justwatch.com/in/movie/k-g-f-chapter-1', 'Error fetching https://www.justwatch.com/in/movie/aatmapamphlet', 'Error fetching https://www.justwatch.com/in/movie/saba-nayagan', 'Error fetching https://www.justwatch.com/in/movie/hacksaw-ridge', 'Error fetching https://www.justwatch.com/in/movie/mission-impossible-7', 'Error fetching https://www.justwatch.com/in/movie/uri-the-surgical-strike', 'Error fetching https://www.justwatch.com/in/movie/naadu', 'Error fetching https://www.justwatch.com/in/movie/naa-saami-ranga', 'Error fetching https://www.justwatch.com/in/movie/route-no-17', 'Error fetching https://www.justwatch.com/in/movie/leo-2023', 'Error fetching https://www.justwatch.com/in/movie/napoleon-2023', 'India', 'Error fetching https://www.justwatch.com/in/movie/deadpool', 'Error fetching https://www.justwatch.com/in/movie/parking-2023', 'Error fetching https://www.justwatch.com/in/movie/fast-x', 'Error fetching https://www.justwatch.com/in/movie/zara-hatke-zara-bach-ke', 'Error fetching https://www.justwatch.com/in/movie/society-of-the-snow', 'Error fetching https://www.justwatch.com/in/movie/tiger-nageswara-rao', 'Error fetching https://www.justwatch.com/in/movie/wonka', 'Error fetching https://www.justwatch.com/in/movie/tiger-3', 'Error fetching https://www.justwatch.com/in/movie/the-peanut-butter-falcon', 'Error fetching https://www.justwatch.com/in/movie/one-day', 'Error fetching https://www.justwatch.com/in/movie/spaceman-2022', 'Error fetching https://www.justwatch.com/in/movie/snatch', 'Error fetching https://www.justwatch.com/in/movie/vadakkupatti-ramasamy', 'Error fetching https://www.justwatch.com/in/movie/blue-beetle', 'Error fetching https://www.justwatch.com/in/movie/777-charlie', 'Error fetching https://www.justwatch.com/in/movie/tumbbad', 'Error fetching https://www.justwatch.com/in/movie/gadar-2', 'Error fetching https://www.justwatch.com/in/movie/dada-2023', 'Error fetching https://www.justwatch.com/in/movie/saltburn', 'Error fetching https://www.justwatch.com/in/movie/the-flash', 'Error fetching https://www.justwatch.com/in/movie/kung-fu-panda', 'Error fetching https://www.justwatch.com/in/movie/blade-runner-2049', 'Error fetching https://www.justwatch.com/in/movie/pushpa', 'Error fetching https://www.justwatch.com/in/movie/allied', 'United States', 'Error fetching https://www.justwatch.com/in/movie/talk-to-me-2022', 'Error fetching https://www.justwatch.com/in/movie/rocky-aur-rani-ki-prem-kahani', 'Error fetching https://www.justwatch.com/in/movie/dziewczyny-z-dubaju', 'Error fetching https://www.justwatch.com/in/movie/kaathal-the-core', 'Error fetching https://www.justwatch.com/in/movie/deadpool-2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Streaming Service Details**"
      ],
      "metadata": {
        "id": "IrJlIsBWrO2r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store streaming services\n",
        "list_of_streaming_services = []\n",
        "# Iterate through each movie link in the list\n",
        "for link in list_of_movies_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the URL\n",
        "        page = requests.get(link)\n",
        "        page.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup = BeautifulSoup(page.text, 'html.parser')\n",
        "\n",
        "        # Find the streaming service icon based on the class 'offer__icon'\n",
        "        streaming_service_icon = soup.find('img', class_='offer__icon')\n",
        "\n",
        "        if streaming_service_icon:\n",
        "            # Extract the alt attribute from the streaming service icon\n",
        "            streaming_service_alt = streaming_service_icon['alt']\n",
        "            list_of_streaming_services.append(streaming_service_alt)\n",
        "        else:\n",
        "            list_of_streaming_services.append(\"Streaming services not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {link}: {req_ex}\")\n",
        "        list_of_streaming_services.append(f\"Error fetching {link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {link}: {ex}\")\n",
        "        list_of_streaming_services.append(f\"Error processing {link}\")\n",
        "\n",
        "# Print the list of extracted streaming service information\n",
        "print(list_of_streaming_services)"
      ],
      "metadata": {
        "id": "Yk72jDLZu7EZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2a3e033-c9d7-4458-cef5-817aaa291c99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Netflix', 'Netflix', 'Netflix', 'Apple TV', 'Hotstar', 'Apple TV', 'Zee5', 'Zee5', 'Apple TV', 'Netflix', 'Amazon Prime Video', 'Sun Nxt', 'Streaming services not found', 'Apple TV', 'Streaming services not found', 'Apple TV', 'Streaming services not found', 'Bookmyshow', 'Hotstar', 'Apple TV', 'Apple TV', 'Apple TV', 'Amazon Prime Video', 'Netflix', 'Streaming services not found', 'Amazon Prime Video', 'Streaming services not found', 'Amazon Prime Video', 'Streaming services not found', 'Netflix', 'Netflix', 'Amazon Prime Video', 'Amazon Prime Video', 'Amazon Prime Video', 'Streaming services not found', 'Apple TV Plus', 'Apple TV', 'Lionsgate Play', 'Apple TV', 'Apple TV', 'Hotstar', 'Netflix', 'Amazon Prime Video', 'Apple TV', 'Bookmyshow', 'Bookmyshow', 'Lionsgate Play', 'Hotstar', 'Streaming services not found', 'Hotstar', 'Zee5', 'Bookmyshow', 'Hotstar', 'Streaming services not found', 'Bookmyshow', 'Netflix', 'Bookmyshow', 'Amazon Prime Video', 'Streaming services not found', 'Bookmyshow', 'Amazon Prime Video', 'Amazon Prime Video', 'Jio Cinema', 'Apple TV', 'Hotstar', 'Amazon Prime Video', 'Apple TV', 'Amazon Prime Video', 'Apple TV', 'Streaming services not found', 'Amazon Prime Video', 'Apple TV', 'Streaming services not found', 'Netflix', 'Amazon Video', 'Apple TV', 'Apple TV Plus', 'Bookmyshow', 'Amazon Prime Video', 'Jio Cinema', 'Apple TV', 'Bookmyshow', 'Amazon Prime Video', 'Apple TV', 'Streaming services not found', 'Amazon Prime Video', 'Streaming services not found', 'Apple TV', 'Zee5', 'Amazon Prime Video', 'Amazon Prime Video', 'Apple TV', 'Amazon Prime Video', 'Netflix', 'Amazon Prime Video', 'Apple TV Plus', 'Streaming services not found', 'Apple TV', 'Apple TV', 'Amazon Prime Video']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Now Creating Movies DataFrame**"
      ],
      "metadata": {
        "id": "Mnh22VX_7f6K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import pandas as pd\n",
        "\n",
        "# Create a dictionary to store movie data\n",
        "dic_for_movies_data_frame = {\n",
        "    \"Movie Name\": list_of_movies_title,\n",
        "    \"Release Year\": list_of_release_years,\n",
        "    \"Rating\": list_of_ratings,\n",
        "    \"Runtime\": list_of_runtimes,\n",
        "    \"Streaming Service\": list_of_streaming_services,\n",
        "    \"Genre\": list_of_genres,\n",
        "    \"Age Rating\": list_of_age_ratings,\n",
        "    \"Production Countries\": list_of_production_countries,\n",
        "    \"Movie Page Link\": list_of_movies_links\n",
        "}\n",
        "\n",
        "# Create a DataFrame from the dictionary\n",
        "movies_dataframe = pd.DataFrame(dic_for_movies_data_frame)\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "movies_dataframe.head()"
      ],
      "metadata": {
        "id": "i7XQUICP5oBI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "09812d74-2f0b-4bab-d61e-21d19c2ec473"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Movie Name Release Year Rating   Runtime Streaming Service  \\\n",
              "0     Salaar         2023    6.5  2h 55min           Netflix   \n",
              "1     Animal         2023    6.3  3h 21min           Netflix   \n",
              "2      Dunki         2023    6.8  2h 40min           Netflix   \n",
              "3       Dune         2021    8.0  2h 35min          Apple TV   \n",
              "4  12th Fail         2023    9.1  2h 26min           Hotstar   \n",
              "\n",
              "                                               Genre            Age Rating  \\\n",
              "0  Action & Adventure, Crime, Drama, Mystery & Th...                     A   \n",
              "1  Action & Adventure, Drama, Mystery & Thriller,...                     A   \n",
              "2                                      Comedy, Drama  Age rating not found   \n",
              "3         Action & Adventure, Science-Fiction, Drama                    UA   \n",
              "4                                     Drama, History  Age rating not found   \n",
              "\n",
              "  Production Countries                                 Movie Page Link  \n",
              "0                India       https://www.justwatch.com/in/movie/salaar  \n",
              "1                India  https://www.justwatch.com/in/movie/animal-2022  \n",
              "2                India        https://www.justwatch.com/in/movie/dunki  \n",
              "3        United States    https://www.justwatch.com/in/movie/dune-2021  \n",
              "4                India    https://www.justwatch.com/in/movie/12th-fail  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-52e070dd-e9c9-42e8-bddb-f1025087c4aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Movie Name</th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Streaming Service</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age Rating</th>\n",
              "      <th>Production Countries</th>\n",
              "      <th>Movie Page Link</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Salaar</td>\n",
              "      <td>2023</td>\n",
              "      <td>6.5</td>\n",
              "      <td>2h 55min</td>\n",
              "      <td>Netflix</td>\n",
              "      <td>Action &amp; Adventure, Crime, Drama, Mystery &amp; Th...</td>\n",
              "      <td>A</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/movie/salaar</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Animal</td>\n",
              "      <td>2023</td>\n",
              "      <td>6.3</td>\n",
              "      <td>3h 21min</td>\n",
              "      <td>Netflix</td>\n",
              "      <td>Action &amp; Adventure, Drama, Mystery &amp; Thriller,...</td>\n",
              "      <td>A</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/movie/animal-2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Dunki</td>\n",
              "      <td>2023</td>\n",
              "      <td>6.8</td>\n",
              "      <td>2h 40min</td>\n",
              "      <td>Netflix</td>\n",
              "      <td>Comedy, Drama</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/movie/dunki</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Dune</td>\n",
              "      <td>2021</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2h 35min</td>\n",
              "      <td>Apple TV</td>\n",
              "      <td>Action &amp; Adventure, Science-Fiction, Drama</td>\n",
              "      <td>UA</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/movie/dune-2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12th Fail</td>\n",
              "      <td>2023</td>\n",
              "      <td>9.1</td>\n",
              "      <td>2h 26min</td>\n",
              "      <td>Hotstar</td>\n",
              "      <td>Drama, History</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/movie/12th-fail</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52e070dd-e9c9-42e8-bddb-f1025087c4aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-52e070dd-e9c9-42e8-bddb-f1025087c4aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-52e070dd-e9c9-42e8-bddb-f1025087c4aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-37181087-690c-4724-85ec-8c7183208bcb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37181087-690c-4724-85ec-8c7183208bcb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-37181087-690c-4724-85ec-8c7183208bcb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "movies_dataframe",
              "repr_error": "'str' object has no attribute 'empty'"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Scraping TV  Show Data**"
      ],
      "metadata": {
        "id": "LYQ5acWzJRZr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Specifying the URL from which tv show related data will be fetched\n",
        "tv_url='https://www.justwatch.com/in/tv-shows?release_year_from=2000'\n",
        "# Sending an HTTP GET request to the URL\n",
        "page=requests.get(tv_url)\n",
        "# Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "soup_for_series = BeautifulSoup(page.text,'html.parser')"
      ],
      "metadata": {
        "id": "Xic8FWfwI6AT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Tv shows Url details**"
      ],
      "metadata": {
        "id": "ev-VUSNvJ-fJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# URL of the main website\n",
        "main_website_url = r'https://www.justwatch.com'\n",
        "\n",
        "# Find all <a> tags with the specified class for series links\n",
        "series_links_html = soup_for_series.find_all('a', class_=\"title-list-grid__item--link\")\n",
        "\n",
        "# Initialize an empty list to store complete series URLs\n",
        "list_of_series_links = []\n",
        "\n",
        "# Iterate through each <a> tag in the list of series links\n",
        "for series_link_html in series_links_html:\n",
        "    # Extract the value of the href attribute (series URL)\n",
        "    series_relative_url = series_link_html.get('href')\n",
        "\n",
        "    # Combine the main website URL with the series URL and append to the list\n",
        "    series_absolute_url = main_website_url + series_relative_url\n",
        "    list_of_series_links.append(series_absolute_url)\n",
        "\n",
        "# Print the list of complete series URLs\n",
        "print(list_of_series_links)"
      ],
      "metadata": {
        "id": "eMlwT4I-8gGh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "62d40527-6b4e-40b4-daf3-7167bbbb2135"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.justwatch.com/in/tv-show/panchayat', 'https://www.justwatch.com/in/tv-show/game-of-thrones', 'https://www.justwatch.com/in/tv-show/mirzapur', 'https://www.justwatch.com/in/tv-show/true-detective', 'https://www.justwatch.com/in/tv-show/solo-leveling-2024', 'https://www.justwatch.com/in/tv-show/one-day', 'https://www.justwatch.com/in/tv-show/shogun-2024', 'https://www.justwatch.com/in/tv-show/aarya', 'https://www.justwatch.com/in/tv-show/indian-police-force', 'https://www.justwatch.com/in/tv-show/avatar-the-last-airbender', 'https://www.justwatch.com/in/tv-show/death-and-other-details', 'https://www.justwatch.com/in/tv-show/halo', 'https://www.justwatch.com/in/tv-show/mastram', 'https://www.justwatch.com/in/tv-show/jack-reacher', 'https://www.justwatch.com/in/tv-show/yellowstone', 'https://www.justwatch.com/in/tv-show/young-sheldon', 'https://www.justwatch.com/in/tv-show/farzi', 'https://www.justwatch.com/in/tv-show/jujutsu-kaisen', 'https://www.justwatch.com/in/tv-show/poacher', 'https://www.justwatch.com/in/tv-show/the-twelve', 'https://www.justwatch.com/in/tv-show/mr-and-mrs-smith', 'https://www.justwatch.com/in/tv-show/bigg-boss', 'https://www.justwatch.com/in/tv-show/sunflower-2021', 'https://www.justwatch.com/in/tv-show/avatar-the-last-airbender-2005', 'https://www.justwatch.com/in/tv-show/criminal-justice-2019', 'https://www.justwatch.com/in/tv-show/loki', 'https://www.justwatch.com/in/tv-show/paperhouse', 'https://www.justwatch.com/in/tv-show/scam-1992', 'https://www.justwatch.com/in/tv-show/aashram', 'https://www.justwatch.com/in/tv-show/masters-of-the-air', 'https://www.justwatch.com/in/tv-show/the-rookie', 'https://www.justwatch.com/in/tv-show/gandii-baat', 'https://www.justwatch.com/in/tv-show/mashle-magic-and-muscles', 'https://www.justwatch.com/in/tv-show/the-last-of-us', 'https://www.justwatch.com/in/tv-show/breaking-bad', 'https://www.justwatch.com/in/tv-show/the-family-man', 'https://www.justwatch.com/in/tv-show/lucifer', 'https://www.justwatch.com/in/tv-show/tokyo-vice', 'https://www.justwatch.com/in/tv-show/euphoria', 'https://www.justwatch.com/in/tv-show/gullak', 'https://www.justwatch.com/in/tv-show/spartacus', 'https://www.justwatch.com/in/tv-show/the-bear', 'https://www.justwatch.com/in/tv-show/shark-tank-india', 'https://www.justwatch.com/in/tv-show/fargo', 'https://www.justwatch.com/in/tv-show/love-never-lies-poland', 'https://www.justwatch.com/in/tv-show/marry-my-husband', 'https://www.justwatch.com/in/tv-show/succession', 'https://www.justwatch.com/in/tv-show/naruto-shippuden', 'https://www.justwatch.com/in/tv-show/the-freelancer', 'https://www.justwatch.com/in/tv-show/house-of-ninjas', 'https://www.justwatch.com/in/tv-show/superman-and-lois', 'https://www.justwatch.com/in/tv-show/the-railway-men-the-untold-story-of-bhopal-1984', 'https://www.justwatch.com/in/tv-show/the-legend-of-hanuman', 'https://www.justwatch.com/in/tv-show/house-of-the-dragon', 'https://www.justwatch.com/in/tv-show/maharani-2021', 'https://www.justwatch.com/in/tv-show/dark-desire', 'https://www.justwatch.com/in/tv-show/modern-family', 'https://www.justwatch.com/in/tv-show/monarch-legacy-of-monsters', 'https://www.justwatch.com/in/tv-show/demon-slayer-kimetsu-no-yaiba', 'https://www.justwatch.com/in/tv-show/a-killer-paradox', 'https://www.justwatch.com/in/tv-show/scam-2003-the-telgi-story', 'https://www.justwatch.com/in/tv-show/peaky-blinders', 'https://www.justwatch.com/in/tv-show/maamla-legal-hai', 'https://www.justwatch.com/in/tv-show/the-king-eternal-monarch', 'https://www.justwatch.com/in/tv-show/the-great-indian-murder', 'https://www.justwatch.com/in/tv-show/one-piece-2023', 'https://www.justwatch.com/in/tv-show/apharan', 'https://www.justwatch.com/in/tv-show/berlin', 'https://www.justwatch.com/in/tv-show/jab-mila-tu', 'https://www.justwatch.com/in/tv-show/stranger-things', 'https://www.justwatch.com/in/tv-show/alexander-the-making-of-a-god', 'https://www.justwatch.com/in/tv-show/asur', 'https://www.justwatch.com/in/tv-show/naruto', 'https://www.justwatch.com/in/tv-show/the-indrani-mukerjea-story-buried-truth', 'https://www.justwatch.com/in/tv-show/curb-your-enthusiasm', 'https://www.justwatch.com/in/tv-show/college-romance', 'https://www.justwatch.com/in/tv-show/flames', 'https://www.justwatch.com/in/tv-show/house', 'https://www.justwatch.com/in/tv-show/the-walking-dead', 'https://www.justwatch.com/in/tv-show/the-flash', 'https://www.justwatch.com/in/tv-show/better-call-saul', 'https://www.justwatch.com/in/tv-show/griselda', 'https://www.justwatch.com/in/tv-show/good-morning-veronica', 'https://www.justwatch.com/in/tv-show/feud', 'https://www.justwatch.com/in/tv-show/taaza-khabar', 'https://www.justwatch.com/in/tv-show/his-dark-materials', 'https://www.justwatch.com/in/tv-show/my-demon', 'https://www.justwatch.com/in/tv-show/ted', 'https://www.justwatch.com/in/tv-show/tadap', 'https://www.justwatch.com/in/tv-show/the-witcher', 'https://www.justwatch.com/in/tv-show/the-boys', 'https://www.justwatch.com/in/tv-show/the-vampire-diaries', 'https://www.justwatch.com/in/tv-show/shameless', 'https://www.justwatch.com/in/tv-show/deaths-game', 'https://www.justwatch.com/in/tv-show/parks-and-recreation', 'https://www.justwatch.com/in/tv-show/the-good-doctor', 'https://www.justwatch.com/in/tv-show/aspirants', 'https://www.justwatch.com/in/tv-show/the-tourist', 'https://www.justwatch.com/in/tv-show/how-i-met-your-mother', 'https://www.justwatch.com/in/tv-show/she']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Tv Show Title details**"
      ],
      "metadata": {
        "id": "1vZLzmqcKDPX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store series titles\n",
        "list_of_series_titles = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    # Set the current URL\n",
        "    url_for_series = series_link\n",
        "\n",
        "    # Sending an HTTP GET request to the series URL\n",
        "    page_for_series = requests.get(url_for_series)\n",
        "\n",
        "    # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "    soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "    # Find the series title (assuming it's in an <h1> tag)\n",
        "    series_title_element = soup_for_series.find('h1')\n",
        "\n",
        "    # Check if the <h1> tag is found\n",
        "    if series_title_element:\n",
        "        # Append the text content of the <h1> tag to the list\n",
        "        series_title_text = series_title_element.text.strip()\n",
        "        list_of_series_titles.append(series_title_text)\n",
        "    else:\n",
        "        # If <h1> tag is not found, add a placeholder to the list\n",
        "        list_of_series_titles.append(f\"Title not found for {url_for_series}\")\n",
        "\n",
        "# Print the list of extracted series titles\n",
        "print(list_of_series_titles)"
      ],
      "metadata": {
        "id": "a8Y6UF6-JLvO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "037af205-bf14-4851-c69a-601b1f2e142d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Panchayat', 'Game of Thrones', 'Mirzapur', 'True Detective', 'Solo Leveling', 'One Day', 'Shōgun', 'Aarya', 'Indian Police Force', 'Avatar: The Last Airbender', 'Death and Other Details', 'Halo', 'Mastram', 'Reacher', 'Yellowstone', 'Young Sheldon', 'Farzi', 'Jujutsu Kaisen', 'Poacher', 'The Twelve', 'Mr. & Mrs. Smith', 'Bigg Boss', 'Sunflower', 'Avatar: The Last Airbender', 'Criminal Justice', 'Loki', 'Money Heist', 'Scam 1992', 'Aashram', 'Masters of the Air', 'The Rookie', 'Gandii Baat', 'Mashle: Magic and Muscles', 'The Last of Us', 'Breaking Bad', 'The Family Man', 'Lucifer', 'Tokyo Vice', 'Euphoria', 'Gullak', 'Spartacus', 'The Bear', 'Shark Tank India', 'Fargo', 'Love Never Lies: Poland', 'Marry My Husband', 'Succession', 'Naruto Shippūden', 'The Freelancer', 'House of Ninjas', 'Superman & Lois', 'The Railway Men - The Untold Story of Bhopal 1984', 'The Legend of Hanuman', 'House of the Dragon', 'Maharani', 'Dark Desire', 'Modern Family', 'Monarch: Legacy of Monsters', 'Demon Slayer: Kimetsu no Yaiba', 'A Killer Paradox', 'Scam 2003: The Telgi Story', 'Peaky Blinders', 'Maamla Legal Hai', 'The King: Eternal Monarch', 'The Great Indian Murder', 'ONE PIECE', 'Apharan', 'Berlin', 'Jab Mila Tu', 'Stranger Things', 'Alexander: The Making of a God', 'Asur: Welcome to Your Dark Side', 'Naruto', 'The Indrani Mukerjea Story: Buried Truth', 'Curb Your Enthusiasm', 'College Romance', 'Flames', 'House', 'The Walking Dead', 'The Flash', 'Better Call Saul', 'Griselda', 'Good Morning, Verônica', 'FEUD', 'Taaza Khabar', 'His Dark Materials', 'My Demon', 'ted', 'Tadap', 'The Witcher', 'The Boys', 'The Vampire Diaries', 'Shameless', \"Death's Game\", 'Parks and Recreation', 'The Good Doctor', 'Aspirants', 'The Tourist', 'How I Met Your Mother', 'She']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Release Year**"
      ],
      "metadata": {
        "id": "mEIt9j6RKa9B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store release years\n",
        "list_of_release_years = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    # Set the current URL\n",
        "    url_for_series = series_link\n",
        "\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(url_for_series)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the release year which is in <span class=\"text-muted\"> on the series's page\n",
        "        release_year_tag = soup_for_series.find('span', class_=\"text-muted\")\n",
        "\n",
        "        # Check if the <span> tag is found\n",
        "        if release_year_tag:\n",
        "            # Extract the text content of the <span> tag and replace parentheses with an empty string\n",
        "            release_year_text = release_year_tag.text.replace('(', '').replace(')', '').strip()\n",
        "            list_of_release_years.append(release_year_text)\n",
        "        else:\n",
        "            # If <span> tag is not found, add a placeholder to the list\n",
        "            list_of_release_years.append(f\"Release year not found for {url_for_series}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {url_for_series}: {req_ex}\")\n",
        "        list_of_release_years.append(f\"Error fetching {url_for_series}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {url_for_series}: {ex}\")\n",
        "        list_of_release_years.append(f\"Error processing {url_for_series}\")\n",
        "\n",
        "# Print the list of extracted release years without parentheses\n",
        "print(list_of_release_years)\n"
      ],
      "metadata": {
        "id": "r72fyiF8JozW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df7d5c56-7809-41f2-812c-4c06488480a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['2020', '2011', '2018', '2014', '2024', '2024', '2024', '2020', '2024', '2024', '2024', '2022', '2020', '2022', '2018', '2017', '2023', '2020', '2023', '2019', '2024', '2006', '2021', '2005', '2019', '2021', '2017', '2020', '2020', '2024', '2018', '2018', '2023', '2023', '2008', '2019', '2016', '2022', '2019', '2019', '2010', '2022', '2021', '2014', '2022', '2024', '2018', '2007', '2023', '2024', '2021', '2023', '2021', '2022', '2021', '2020', '2009', '2023', '2019', '2024', '2023', '2013', '2024', '2020', '2022', '2023', '2018', '2023', '2024', '2016', '2024', '2020', '2002', '2024', '2000', '2018', '2018', '2004', '2010', '2014', '2015', '2024', '2020', '2017', '2023', '2019', '2023', '2024', '2019', '2019', '2019', '2009', '2011', '2023', '2009', '2017', '2021', '2022', '2005', '2020']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching TV Show Genre Details**"
      ],
      "metadata": {
        "id": "P96pGO9kRCLv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store genres\n",
        "list_of_genres_series = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    # Set the current URL\n",
        "    url_for_series = series_link\n",
        "\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(url_for_series)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the <h3> tag containing \"Genres\"\n",
        "        genres_heading = soup_for_series.find('h3', class_=\"detail-infos__subheading\", string=\"Genres\")\n",
        "\n",
        "        # Check if the <h3> tag is found\n",
        "        if genres_heading:\n",
        "            # Extract the next sibling <div> tag (which contains the genres)\n",
        "            genres_div = genres_heading.find_next('div', class_=\"detail-infos__value\")\n",
        "            if genres_div:\n",
        "                # Extract the text content of the <div> tag and strip extra whitespaces\n",
        "                genres_text = genres_div.text.strip()\n",
        "                list_of_genres_series.append(genres_text)\n",
        "            else:\n",
        "                list_of_genres_series.append(f\"Genres not found for {url_for_series}\")\n",
        "        else:\n",
        "            list_of_genres_series.append(f\"Genres heading not found for {url_for_series}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {url_for_series}: {req_ex}\")\n",
        "        list_of_genres_series.append(f\"Error fetching {url_for_series}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {url_for_series}: {ex}\")\n",
        "        list_of_genres_series.append(f\"Error processing {url_for_series}\")\n",
        "\n",
        "# Print the list of extracted genres\n",
        "print(list_of_genres_series)\n"
      ],
      "metadata": {
        "id": "Jay8a9xgT43-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7675812a-042e-402d-99d3-88e9f1c776d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Comedy, Drama', 'Science-Fiction, Action & Adventure, Drama, Fantasy', 'Drama, Crime, Action & Adventure, Mystery & Thriller', 'Drama, Mystery & Thriller, Crime', 'Animation, Action & Adventure, Fantasy, Science-Fiction', 'Comedy, Drama, Romance', 'Drama, War & Military, History', 'Crime, Drama, Mystery & Thriller, Action & Adventure', 'Action & Adventure, Crime', 'Science-Fiction, Action & Adventure, Comedy, Drama, Kids & Family, Fantasy', 'Mystery & Thriller, Drama, Crime', 'Action & Adventure, Science-Fiction, Mystery & Thriller, War & Military', 'Drama, Comedy, Fantasy', 'Action & Adventure, Crime, Drama, Mystery & Thriller', 'Drama, Western', 'Kids & Family, Comedy', 'Crime, Drama, Mystery & Thriller', 'Mystery & Thriller, Animation, Action & Adventure, Fantasy, Science-Fiction', 'Crime, Drama', 'Drama, Mystery & Thriller', 'Drama, Comedy, Action & Adventure, Crime, Mystery & Thriller', 'Reality TV, Kids & Family', 'Comedy, Crime', 'Action & Adventure, Science-Fiction, Fantasy, Animation, Kids & Family', 'Drama, Mystery & Thriller, Crime', 'Science-Fiction, Action & Adventure, Fantasy, Drama', 'Drama, Mystery & Thriller, Action & Adventure, Crime, Made in Europe', 'Crime, Drama, Mystery & Thriller', 'Crime, Drama, Mystery & Thriller', 'Drama, War & Military, Action & Adventure, Mystery & Thriller', 'Comedy, Drama, Action & Adventure, Crime', 'Crime, Drama, Mystery & Thriller', 'Action & Adventure, Comedy, Fantasy, Animation, Science-Fiction', 'Drama, Horror, Science-Fiction, Mystery & Thriller, Action & Adventure', 'Drama, Mystery & Thriller, Crime', 'Comedy, Drama, Action & Adventure', 'Crime, Science-Fiction, Drama, Fantasy', 'Drama, Crime, Mystery & Thriller', 'Drama', 'Comedy, Drama, Kids & Family', 'Drama, Romance, Action & Adventure', 'Drama, Comedy', 'Reality TV', 'Crime, Drama, Mystery & Thriller', 'Reality TV', 'Drama, Fantasy, Romance, Comedy, Science-Fiction', 'Drama, Comedy', 'Animation, Action & Adventure, Science-Fiction, Comedy, Drama, Fantasy', 'Action & Adventure, Mystery & Thriller, Drama', 'Action & Adventure, Drama, Mystery & Thriller', 'Drama, Science-Fiction, Romance, Action & Adventure', 'Drama, History, Mystery & Thriller', 'Animation, Action & Adventure, Fantasy', 'Science-Fiction, Drama, Action & Adventure, Fantasy, Romance', 'Drama', 'Mystery & Thriller, Drama', 'Romance, Comedy, Drama', 'Drama, Science-Fiction, Action & Adventure', 'Animation, Action & Adventure, Fantasy, Mystery & Thriller, Science-Fiction', 'Mystery & Thriller, Comedy, Crime', 'Drama', 'Drama, Crime', 'Drama', 'Science-Fiction, Drama', 'Mystery & Thriller, Crime', 'Action & Adventure, Science-Fiction, Drama, Fantasy, Comedy', 'Drama, Mystery & Thriller, Action & Adventure, Crime', 'Drama, Action & Adventure, Crime, Mystery & Thriller', 'Romance, Drama', 'Drama, Science-Fiction, Mystery & Thriller, Fantasy, Horror', 'Documentary, Drama, History', 'Crime, Drama, Mystery & Thriller', 'Action & Adventure, Science-Fiction, Animation, Fantasy, Comedy', 'Documentary, Crime', 'Comedy', 'Comedy, Drama, Romance', 'Comedy, Drama, Romance, Made in Europe', 'Drama, Mystery & Thriller', 'Action & Adventure, Drama, Science-Fiction, Mystery & Thriller, Horror', 'Science-Fiction, Action & Adventure, Drama', 'Crime, Drama', 'Drama, Crime', 'Crime, Drama, Mystery & Thriller', 'Drama', 'Science-Fiction, Drama, Fantasy, Mystery & Thriller, Action & Adventure, Comedy', 'Science-Fiction, Drama, Fantasy', 'Science-Fiction, Fantasy, Romance, Comedy, Drama', 'Comedy', 'Drama, Romance', 'Action & Adventure, Science-Fiction, Drama, Fantasy', 'Science-Fiction, Action & Adventure, Comedy, Crime, Drama', 'Science-Fiction, Romance, Mystery & Thriller, Drama, Fantasy, Horror', 'Drama, Comedy', 'Drama, Science-Fiction, Fantasy', 'Comedy', 'Drama', 'Drama', 'Mystery & Thriller, Drama, Action & Adventure', 'Comedy, Drama, Romance', 'Drama, Crime']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching IMDB Rating Details**"
      ],
      "metadata": {
        "id": "hk3eSdDAXQv8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store IMDb ratings\n",
        "list_of_imdb_ratings = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(series_link)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the img tag with alt attribute 'IMDB'\n",
        "        imdb_img = soup_for_series.find('img', alt=re.compile(r'IMDB'))\n",
        "\n",
        "        if imdb_img:\n",
        "            # Extract IMDb rating from the following sibling span\n",
        "            imdb_rating_span = imdb_img.find_next('span')\n",
        "            imdb_rating = re.search(r'\\d+\\.\\d+', imdb_rating_span.get_text()).group()\n",
        "            list_of_imdb_ratings.append(imdb_rating)\n",
        "        else:\n",
        "            list_of_imdb_ratings.append(\"IMDb Rating not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {series_link}: {req_ex}\")\n",
        "        list_of_imdb_ratings.append(f\"Error fetching {series_link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {series_link}: {ex}\")\n",
        "        list_of_imdb_ratings.append(f\"Error processing {series_link}\")\n",
        "\n",
        "# Print the list of extracted IMDb ratings\n",
        "print(list_of_imdb_ratings)"
      ],
      "metadata": {
        "id": "EmltFOQEXM2W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be82c01c-9810-46a7-ae9a-da3528a5191b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['8.9', '9.2', '8.5', '8.9', '8.5', '8.2', '9.2', '7.9', '4.9', '7.4', '6.9', '7.2', '7.1', '8.1', '8.7', '7.6', '8.4', '8.6', '7.7', '7.4', '7.0', '3.7', '7.4', '9.3', '8.1', '8.2', '8.2', '9.3', '7.4', '7.9', '8.0', '3.4', '7.6', '8.7', '9.5', '8.7', '8.1', '8.0', '8.3', '9.1', '8.5', '8.6', '8.7', '8.9', 'IMDb Rating not found', '7.9', '8.8', '8.7', '8.1', '7.3', '7.8', '8.5', '9.1', '8.4', '7.9', '6.5', '8.5', '7.0', '8.7', '7.2', 'IMDb Rating not found', '8.8', 'IMDb Rating not found', 'IMDb Rating not found', '6.8', '8.3', '8.3', '7.0', '7.8', '8.7', '5.2', '8.5', '8.4', '6.3', '8.8', '8.3', '8.9', '8.7', '8.1', '7.5', '9.0', '7.2', '7.5', '8.4', '8.1', '7.8', '7.7', '8.0', '5.8', '8.0', '8.7', '7.7', '8.5', '8.6', '8.6', '8.0', '9.2', '7.1', '8.3', '6.4']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Age Rating Details**"
      ],
      "metadata": {
        "id": "XZ9nJhmiZB_W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store age ratings\n",
        "list_of_age_ratings = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(series_link)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the h3 tag with class 'detail-infos__subheading' and text 'Age rating'\n",
        "        age_rating_heading = soup_for_series.find('h3', class_='detail-infos__subheading', string='Age rating')\n",
        "\n",
        "        if age_rating_heading:\n",
        "            # Extract age rating from the following sibling div\n",
        "            age_rating = age_rating_heading.find_next('div', class_='detail-infos__value').get_text(strip=True)\n",
        "            list_of_age_ratings.append(age_rating)\n",
        "        else:\n",
        "            list_of_age_ratings.append(\"Age rating not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {series_link}: {req_ex}\")\n",
        "        list_of_age_ratings.append(f\"Error fetching {series_link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {series_link}: {ex}\")\n",
        "        list_of_age_ratings.append(f\"Error processing {series_link}\")\n",
        "\n",
        "# Print the list of extracted age ratings\n",
        "print(list_of_age_ratings)"
      ],
      "metadata": {
        "id": "wR9Xo8piZA7p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2075c014-11f1-43b2-8522-d53e79756dc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Age rating not found', 'U', 'Age rating not found', 'U', 'Age rating not found', 'A', 'Age rating not found', 'Age rating not found', 'A', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'Age rating not found', 'U', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'U', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'Age rating not found', 'A', 'Age rating not found', 'A', 'U', 'Age rating not found', 'U', 'A', 'A', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'U', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'U', 'U', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'UA', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'U', 'A', 'Age rating not found', 'U', 'U', 'Age rating not found', 'A', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'Age rating not found', 'A', 'A', 'U', 'U', 'Age rating not found', 'Age rating not found', 'U', 'Age rating not found', 'A', 'U', 'Age rating not found']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Production Country details**"
      ],
      "metadata": {
        "id": "ii49LH4tdNoN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import re\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "\n",
        "# Initialize an empty list to store production countries\n",
        "list_of_production_countries = []\n",
        "\n",
        "for series_link in list_of_series_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(series_link, timeout=10)  # Adjust timeout as needed\n",
        "        page_for_series.raise_for_status()\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the production country directly\n",
        "        production_country = soup_for_series.find('h3', class_='detail-infos__subheading', string=re.compile(r'production\\s*country', re.I))\n",
        "\n",
        "        if production_country:\n",
        "            production_country = production_country.find_next('div', class_='detail-infos__value').get_text(strip=True)\n",
        "            list_of_production_countries.append(production_country)\n",
        "        else:\n",
        "            list_of_production_countries.append(\"Production country not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {series_link}: {req_ex}\")\n",
        "        list_of_production_countries.append(f\"Error fetching {series_link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {series_link}: {ex}\")\n",
        "        list_of_production_countries.append(f\"Error processing {series_link}\")\n",
        "\n",
        "# Print the list of extracted production countries\n",
        "print(list_of_production_countries)"
      ],
      "metadata": {
        "id": "xihOeyN8XXDt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d897bbd-9ffe-472c-c81a-7d64f11ec496"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['India', 'United States', 'India', 'United States', 'Japan, South Korea', 'United Kingdom', 'United States', 'India', 'India', 'United States', 'United States', 'United States', 'India', 'United States', 'United States', 'United States', 'India', 'Japan, United States', 'United States, India', 'Belgium', 'United States', 'India', 'India', 'United States', 'India', 'United States', 'Spain', 'India', 'India', 'United States', 'United States', 'India', 'Japan', 'United States', 'United States', 'India', 'United States', 'United States', 'United States', 'India', 'United States', 'United States', 'India', 'United States', 'Poland', 'South Korea', 'United States', 'Japan', 'India', 'Japan', 'United States', 'India', 'India', 'United States', 'India', 'Mexico', 'United States', 'United States', 'Japan', 'South Korea', 'India', 'United Kingdom', 'India', 'South Korea', 'India', 'United States', 'India', 'Spain', 'India', 'United States', 'United Kingdom', 'India', 'Japan', 'India', 'United States', 'India', 'India', 'United States', 'United States', 'United States', 'United States', 'United States', 'Brazil', 'United States', 'India', 'United Kingdom', 'South Korea', 'United States', 'India', 'United States', 'United States', 'United States', 'United States', 'South Korea', 'United States', 'United States', 'India', 'United Kingdom', 'United States', 'India']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Streaming Service details**"
      ],
      "metadata": {
        "id": "mHZwwgiKdlQm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store streaming services\n",
        "list_of_streaming_services = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(series_link)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the streaming service icon based on the class 'offer__icon'\n",
        "        streaming_service_icon = soup_for_series.find('img', class_='offer__icon')\n",
        "\n",
        "        if streaming_service_icon:\n",
        "            # Extract the alt attribute from the streaming service icon\n",
        "            streaming_service_alt = streaming_service_icon['alt']\n",
        "            list_of_streaming_services.append(streaming_service_alt)\n",
        "        else:\n",
        "            list_of_streaming_services.append(\"Streaming services not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {series_link}: {req_ex}\")\n",
        "        list_of_streaming_services.append(f\"Error fetching {series_link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {series_link}: {ex}\")\n",
        "        list_of_streaming_services.append(f\"Error processing {series_link}\")\n",
        "\n",
        "# Print the list of extracted streaming service information\n",
        "print(list_of_streaming_services)"
      ],
      "metadata": {
        "id": "_MBl6Vqadrl9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "576c6552-41d6-4dfe-9318-f55cad2b65ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Amazon Prime Video', 'Jio Cinema', 'Amazon Prime Video', 'Jio Cinema', 'Crunchyroll', 'Netflix', 'Hotstar', 'Hotstar', 'Amazon Prime Video', 'Netflix', 'Hotstar', 'Jio Cinema', 'Streaming services not found', 'Amazon Prime Video', 'Netflix', 'Amazon Prime Video', 'Amazon Prime Video', 'Crunchyroll', 'Amazon Prime Video', 'Netflix', 'Amazon Prime Video', 'Streaming services not found', 'VI movies and tv', 'Streaming services not found', 'Hotstar', 'Hotstar', 'Netflix', 'Sony Liv', 'MX Player', 'Apple TV Plus', 'Streaming services not found', 'Alt Balaji', 'Crunchyroll', 'Jio Cinema', 'Netflix', 'Amazon Prime Video', 'Netflix', 'Lionsgate Play', 'Jio Cinema', 'Sony Liv', 'Lionsgate Play', 'Hotstar', 'Sony Liv', 'Streaming services not found', 'Netflix', 'Amazon Prime Video', 'Jio Cinema', 'Crunchyroll', 'Hotstar', 'Netflix', 'Amazon Prime Video', 'Netflix', 'Hotstar', 'Jio Cinema', 'Sony Liv', 'Netflix', 'Hotstar', 'Apple TV Plus', 'Crunchyroll', 'Netflix', 'Sony Liv', 'Netflix', 'Netflix', 'Netflix', 'Hotstar', 'Netflix', 'Jio Cinema', 'Netflix', 'Jio Cinema', 'Netflix', 'Netflix', 'Jio Cinema', 'Netflix', 'Netflix', 'Jio Cinema', 'Sony Liv', 'Amazon Prime Video', 'Netflix', 'Netflix', 'Streaming services not found', 'Netflix', 'Netflix', 'Netflix', 'Hotstar', 'Hotstar', 'Jio Cinema', 'Netflix', 'Streaming services not found', 'Jio Cinema', 'Netflix', 'Amazon Prime Video', 'Netflix', 'Netflix', 'Amazon Prime Video', 'Jio Cinema', 'Netflix', 'Amazon Prime Video', 'Lionsgate Play', 'Hotstar', 'Netflix']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Fetching Duration Details**"
      ],
      "metadata": {
        "id": "uUOtDJv9gM4a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Initialize an empty list to store runtimes\n",
        "list_of_runtimes = []\n",
        "\n",
        "# Iterate through each series link in the list (list_of_series_links)\n",
        "for series_link in list_of_series_links:\n",
        "    try:\n",
        "        # Sending an HTTP GET request to the series URL\n",
        "        page_for_series = requests.get(series_link)\n",
        "        page_for_series.raise_for_status()  # Raise an exception for bad responses (e.g., 404)\n",
        "\n",
        "        # Parsing the HTML content using BeautifulSoup with the 'html.parser'\n",
        "        soup_for_series = BeautifulSoup(page_for_series.text, 'html.parser')\n",
        "\n",
        "        # Find the <h3> tag containing \"Runtime\"\n",
        "        runtime_heading = soup_for_series.find('h3', class_='detail-infos__subheading', string='Runtime')\n",
        "\n",
        "        if runtime_heading:\n",
        "            # Extract the runtime from the following sibling div\n",
        "            runtime_div = runtime_heading.find_next('div', class_='detail-infos__value')\n",
        "            runtime = runtime_div.get_text(strip=True)\n",
        "            list_of_runtimes.append(runtime)\n",
        "        else:\n",
        "            list_of_runtimes.append(\"Runtime not found\")\n",
        "\n",
        "    except requests.exceptions.RequestException as req_ex:\n",
        "        # Handle potential HTTP request errors\n",
        "        print(f\"Error fetching {series_link}: {req_ex}\")\n",
        "        list_of_runtimes.append(f\"Error fetching {series_link}\")\n",
        "\n",
        "    except Exception as ex:\n",
        "        # Handle other unexpected exceptions\n",
        "        print(f\"Error processing {series_link}: {ex}\")\n",
        "        list_of_runtimes.append(f\"Error processing {series_link}\")\n",
        "\n",
        "# Print the list of extracted runtimes\n",
        "print(list_of_runtimes)"
      ],
      "metadata": {
        "id": "o4x4YY6AfoL1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86d33eeb-d97b-4552-a92f-c7c8b3dd7dbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['33min', '58min', '50min', '1h 1min', '24min', '29min', '55min', '46min', '38min', '54min', '45min', '52min', '28min', '48min', '50min', '19min', '56min', '23min', '47min', '54min', '49min', '1h 15min', '37min', '24min', '50min', '49min', '50min', '52min', '43min', '53min', '42min', '44min', '23min', '58min', '47min', '45min', '47min', '58min', '58min', '29min', '54min', '33min', '56min', '52min', '48min', '1h 3min', '1h 4min', '24min', '50min', '53min', '42min', '59min', '21min', '1h 2min', '44min', '34min', '21min', '46min', '26min', '53min', '44min', '58min', '38min', '1h 13min', '45min', '56min', '24min', '48min', '25min', '1h 1min', '39min', '47min', '23min', '46min', '33min', '31min', '31min', '44min', '46min', '42min', '50min', '55min', '49min', '52min', '29min', '54min', '1h 6min', '36min', '29min', '57min', '1h 1min', '42min', '55min', '51min', '22min', '43min', '44min', '58min', '24min', '41min']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Creating TV Show DataFrame**"
      ],
      "metadata": {
        "id": "nD4QVPT-nfVR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import pandas as pd\n",
        "\n",
        "# Create a dictionary to store series data\n",
        "dict_for_series_data_frame = {\n",
        "    \"Series Name\": list_of_series_titles,\n",
        "    \"Release Year\": list_of_release_years,\n",
        "    \"Rating\": list_of_imdb_ratings,\n",
        "    \"Runtime\": list_of_runtimes,\n",
        "    \"Streaming Service\": list_of_streaming_services,\n",
        "    \"Genre\": list_of_genres_series,\n",
        "    \"Age Rating\": list_of_age_ratings,\n",
        "    \"Production Countries\": list_of_production_countries,\n",
        "    \"Series Page Link\": list_of_series_links\n",
        "}\n",
        "\n",
        "# Create a DataFrame from the dictionary\n",
        "series_dataframe = pd.DataFrame(dict_for_series_data_frame)\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "series_dataframe.head()"
      ],
      "metadata": {
        "id": "W3Lnlb-xip2U",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "7fcc9709-d3a4-409b-e5b9-4889d6bdf854"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Series Name Release Year Rating  Runtime   Streaming Service  \\\n",
              "0        Panchayat         2020    8.9    33min  Amazon Prime Video   \n",
              "1  Game of Thrones         2011    9.2    58min          Jio Cinema   \n",
              "2         Mirzapur         2018    8.5    50min  Amazon Prime Video   \n",
              "3   True Detective         2014    8.9  1h 1min          Jio Cinema   \n",
              "4    Solo Leveling         2024    8.5    24min         Crunchyroll   \n",
              "\n",
              "                                               Genre            Age Rating  \\\n",
              "0                                      Comedy, Drama  Age rating not found   \n",
              "1  Science-Fiction, Action & Adventure, Drama, Fa...                     U   \n",
              "2  Drama, Crime, Action & Adventure, Mystery & Th...  Age rating not found   \n",
              "3                   Drama, Mystery & Thriller, Crime                     U   \n",
              "4  Animation, Action & Adventure, Fantasy, Scienc...  Age rating not found   \n",
              "\n",
              "  Production Countries                                   Series Page Link  \n",
              "0                India     https://www.justwatch.com/in/tv-show/panchayat  \n",
              "1        United States  https://www.justwatch.com/in/tv-show/game-of-t...  \n",
              "2                India      https://www.justwatch.com/in/tv-show/mirzapur  \n",
              "3        United States  https://www.justwatch.com/in/tv-show/true-dete...  \n",
              "4   Japan, South Korea  https://www.justwatch.com/in/tv-show/solo-leve...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c783740-808e-49c8-9510-641cde96105a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Series Name</th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Streaming Service</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age Rating</th>\n",
              "      <th>Production Countries</th>\n",
              "      <th>Series Page Link</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Panchayat</td>\n",
              "      <td>2020</td>\n",
              "      <td>8.9</td>\n",
              "      <td>33min</td>\n",
              "      <td>Amazon Prime Video</td>\n",
              "      <td>Comedy, Drama</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/panchayat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Game of Thrones</td>\n",
              "      <td>2011</td>\n",
              "      <td>9.2</td>\n",
              "      <td>58min</td>\n",
              "      <td>Jio Cinema</td>\n",
              "      <td>Science-Fiction, Action &amp; Adventure, Drama, Fa...</td>\n",
              "      <td>U</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/game-of-t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mirzapur</td>\n",
              "      <td>2018</td>\n",
              "      <td>8.5</td>\n",
              "      <td>50min</td>\n",
              "      <td>Amazon Prime Video</td>\n",
              "      <td>Drama, Crime, Action &amp; Adventure, Mystery &amp; Th...</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>India</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/mirzapur</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>True Detective</td>\n",
              "      <td>2014</td>\n",
              "      <td>8.9</td>\n",
              "      <td>1h 1min</td>\n",
              "      <td>Jio Cinema</td>\n",
              "      <td>Drama, Mystery &amp; Thriller, Crime</td>\n",
              "      <td>U</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/true-dete...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Solo Leveling</td>\n",
              "      <td>2024</td>\n",
              "      <td>8.5</td>\n",
              "      <td>24min</td>\n",
              "      <td>Crunchyroll</td>\n",
              "      <td>Animation, Action &amp; Adventure, Fantasy, Scienc...</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>Japan, South Korea</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/solo-leve...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c783740-808e-49c8-9510-641cde96105a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c783740-808e-49c8-9510-641cde96105a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c783740-808e-49c8-9510-641cde96105a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-712e35ee-4a21-479d-a96b-d9ac55160ddc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-712e35ee-4a21-479d-a96b-d9ac55160ddc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-712e35ee-4a21-479d-a96b-d9ac55160ddc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "series_dataframe",
              "repr_error": "'str' object has no attribute 'empty'"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 2 :- Data Filtering & Analysis**"
      ],
      "metadata": {
        "id": "CyqHHKh4IDx6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "from datetime import datetime\n",
        "\n",
        "# Convert 'Release Year' and 'Rating' columns to numeric\n",
        "movies_dataframe['Release Year'] = pd.to_numeric(movies_dataframe['Release Year'], errors='coerce')\n",
        "movies_dataframe['Rating'] = pd.to_numeric(movies_dataframe['Rating'], errors='coerce')\n",
        "\n",
        "series_dataframe['Release Year'] = pd.to_numeric(series_dataframe['Release Year'], errors='coerce')\n",
        "series_dataframe['Rating'] = pd.to_numeric(series_dataframe['Rating'], errors='coerce')\n",
        "\n",
        "# Get the current year\n",
        "current_year = datetime.now().year\n",
        "\n",
        "# Filter movies and TV shows released in the last 2 years\n",
        "recent_movies = movies_dataframe[movies_dataframe['Release Year'] >= current_year - 2]\n",
        "recent_series = series_dataframe[series_dataframe['Release Year'] >= current_year - 2]\n",
        "\n",
        "# Filter movies and TV shows with an IMDb rating of 7 or higher\n",
        "high_rated_movies = movies_dataframe[movies_dataframe['Rating'] >= 7.0]\n",
        "high_rated_series = series_dataframe[series_dataframe['Rating'] >= 7.0]\n",
        "\n",
        "# Save filtered movies and TV shows in new dataframe variables\n",
        "filtered_movies = recent_movies[recent_movies['Rating'] >= 7.0]\n",
        "filtered_series = recent_series[recent_series['Rating'] >= 7.0]\n",
        "\n",
        "# Display the filtered dataframes\n",
        "filtered_movies.head()\n",
        "\n",
        "filtered_series.head()"
      ],
      "metadata": {
        "id": "ly64H04vH1v9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "d1089849-0119-41ce-add1-d1a05cff3c38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Series Name  Release Year  Rating Runtime  \\\n",
              "4                Solo Leveling          2024     8.5   24min   \n",
              "5                      One Day          2024     8.2   29min   \n",
              "6                       Shōgun          2024     9.2   55min   \n",
              "9   Avatar: The Last Airbender          2024     7.4   54min   \n",
              "11                        Halo          2022     7.2   52min   \n",
              "\n",
              "   Streaming Service                                              Genre  \\\n",
              "4        Crunchyroll  Animation, Action & Adventure, Fantasy, Scienc...   \n",
              "5            Netflix                             Comedy, Drama, Romance   \n",
              "6            Hotstar                     Drama, War & Military, History   \n",
              "9            Netflix  Science-Fiction, Action & Adventure, Comedy, D...   \n",
              "11        Jio Cinema  Action & Adventure, Science-Fiction, Mystery &...   \n",
              "\n",
              "              Age Rating Production Countries  \\\n",
              "4   Age rating not found   Japan, South Korea   \n",
              "5                      A       United Kingdom   \n",
              "6   Age rating not found        United States   \n",
              "9   Age rating not found        United States   \n",
              "11  Age rating not found        United States   \n",
              "\n",
              "                                     Series Page Link  \n",
              "4   https://www.justwatch.com/in/tv-show/solo-leve...  \n",
              "5        https://www.justwatch.com/in/tv-show/one-day  \n",
              "6    https://www.justwatch.com/in/tv-show/shogun-2024  \n",
              "9   https://www.justwatch.com/in/tv-show/avatar-th...  \n",
              "11          https://www.justwatch.com/in/tv-show/halo  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d77a8af1-8381-4f73-8ccd-efab58bbc312\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Series Name</th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Streaming Service</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age Rating</th>\n",
              "      <th>Production Countries</th>\n",
              "      <th>Series Page Link</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Solo Leveling</td>\n",
              "      <td>2024</td>\n",
              "      <td>8.5</td>\n",
              "      <td>24min</td>\n",
              "      <td>Crunchyroll</td>\n",
              "      <td>Animation, Action &amp; Adventure, Fantasy, Scienc...</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>Japan, South Korea</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/solo-leve...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>One Day</td>\n",
              "      <td>2024</td>\n",
              "      <td>8.2</td>\n",
              "      <td>29min</td>\n",
              "      <td>Netflix</td>\n",
              "      <td>Comedy, Drama, Romance</td>\n",
              "      <td>A</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/one-day</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Shōgun</td>\n",
              "      <td>2024</td>\n",
              "      <td>9.2</td>\n",
              "      <td>55min</td>\n",
              "      <td>Hotstar</td>\n",
              "      <td>Drama, War &amp; Military, History</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/shogun-2024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Avatar: The Last Airbender</td>\n",
              "      <td>2024</td>\n",
              "      <td>7.4</td>\n",
              "      <td>54min</td>\n",
              "      <td>Netflix</td>\n",
              "      <td>Science-Fiction, Action &amp; Adventure, Comedy, D...</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/avatar-th...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Halo</td>\n",
              "      <td>2022</td>\n",
              "      <td>7.2</td>\n",
              "      <td>52min</td>\n",
              "      <td>Jio Cinema</td>\n",
              "      <td>Action &amp; Adventure, Science-Fiction, Mystery &amp;...</td>\n",
              "      <td>Age rating not found</td>\n",
              "      <td>United States</td>\n",
              "      <td>https://www.justwatch.com/in/tv-show/halo</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d77a8af1-8381-4f73-8ccd-efab58bbc312')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d77a8af1-8381-4f73-8ccd-efab58bbc312 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d77a8af1-8381-4f73-8ccd-efab58bbc312');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fd1789a4-c8cf-4965-8f33-8e13e3ed18b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd1789a4-c8cf-4965-8f33-8e13e3ed18b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fd1789a4-c8cf-4965-8f33-8e13e3ed18b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "filtered_series",
              "summary": "{\n  \"name\": \"filtered_series\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"Series Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"ted\",\n          \"The Freelancer\",\n          \"Jab Mila Tu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Release Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2022,\n        \"max\": 2024,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2024,\n          2022,\n          2023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5944281517443524,\n        \"min\": 7.0,\n        \"max\": 9.2,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          8.5,\n          8.2,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Runtime\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"24min\",\n          \"1h 3min\",\n          \"49min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Streaming Service\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Netflix\",\n          \"Apple TV Plus\",\n          \"Crunchyroll\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Comedy\",\n          \"Action & Adventure, Mystery & Thriller, Drama\",\n          \"Romance, Drama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age Rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"A\",\n          \"Age rating not found\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Production Countries\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"United Kingdom\",\n          \"Japan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series Page Link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"https://www.justwatch.com/in/tv-show/ted\",\n          \"https://www.justwatch.com/in/tv-show/the-freelancer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Calculating Mean IMDB Ratings for both Movies and Tv Shows**"
      ],
      "metadata": {
        "id": "0bPDbn-gPyfm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import pandas as pd\n",
        "\n",
        "# Convert 'Rating' column to numeric, replacing non-numeric values with NaN\n",
        "movies_dataframe['Rating'] = pd.to_numeric(movies_dataframe['Rating'], errors='coerce')\n",
        "series_dataframe['Rating'] = pd.to_numeric(series_dataframe['Rating'], errors='coerce')\n",
        "\n",
        "# Calculate the mean IMDb rating for movies\n",
        "mean_imdb_rating_movies = movies_dataframe['Rating'].mean()\n",
        "\n",
        "# Calculate the mean IMDb rating for TV shows\n",
        "mean_imdb_rating_series = series_dataframe['Rating'].mean()\n",
        "\n",
        "print(f\"Mean IMDb Rating for Movies: {mean_imdb_rating_movies}\")\n",
        "print(f\"Mean IMDb Rating for TV Shows: {mean_imdb_rating_series}\")"
      ],
      "metadata": {
        "id": "6aGmGPOlIkk4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "557615f5-7c6d-40bf-a235-80c7ae29d133"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean IMDb Rating for Movies: 7.171\n",
            "Mean IMDb Rating for TV Shows: 7.951041666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Analyzing Top Genres**"
      ],
      "metadata": {
        "id": "N_OroblUQG4r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "# Split the genres string into a list for TV series\n",
        "series_dataframe['Genre'] = series_dataframe['Genre'].str.split(', ')\n",
        "genres_list_series = [genre for genres in series_dataframe['Genre'].dropna() for genre in genres]\n",
        "genre_counts_series = pd.Series(genres_list_series).value_counts()\n",
        "\n",
        "# Split the genres string into a list for movies\n",
        "movies_dataframe['Genre'] = movies_dataframe['Genre'].str.split(', ')\n",
        "genres_list_movies = [genre for genres in movies_dataframe['Genre'].dropna() for genre in genres]\n",
        "genre_counts_movies = pd.Series(genres_list_movies).value_counts()\n",
        "\n",
        "# Identify the top 5 genres for TV series and movies\n",
        "top_genres_series = genre_counts_series.head(5)\n",
        "top_genres_movies = genre_counts_movies.head(5)\n",
        "\n",
        "print(\"Top 5 Genres in TV Series:\")\n",
        "print(top_genres_series)\n",
        "\n",
        "print(\"\\nTop 5 Genres in Movies:\")\n",
        "print(top_genres_movies)"
      ],
      "metadata": {
        "id": "4ljPnIn2LJLZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db7dd411-1cb6-4f97-91bd-4ce1fd78a589"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 Genres in TV Series:\n",
            "Drama                 80\n",
            "Action & Adventure    37\n",
            "Mystery & Thriller    37\n",
            "Crime                 32\n",
            "Comedy                29\n",
            "dtype: int64\n",
            "\n",
            "Top 5 Genres in Movies:\n",
            "Drama                 72\n",
            "Action & Adventure    48\n",
            "Mystery & Thriller    42\n",
            "Comedy                28\n",
            "Crime                 19\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Let's Visvalize it using word cloud\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Generate a word cloud for TV series genres\n",
        "wordcloud_series = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(top_genres_series)\n",
        "\n",
        "# Generate a word cloud for movies genres\n",
        "wordcloud_movies = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(top_genres_movies)\n",
        "\n",
        "# Plot the word clouds\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.imshow(wordcloud_series, interpolation='bilinear')\n",
        "plt.title('Top Genres in TV Series')\n",
        "plt.axis('off')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.imshow(wordcloud_movies, interpolation='bilinear')\n",
        "plt.title('Top Genres in Movies')\n",
        "plt.axis('off')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "7Nqu7MEEYa3c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "outputId": "2e95e084-3f19-44c6-b720-d8d51b0435b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7YAAAD9CAYAAACIjeuqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd5xcV33w/8+5d+702d612qJV77LkKsmWq1wBG2ODTYBQ4gQI8DwJSfjxJA8JDymEhBQCASeEajCmucoN9yLZsmT1Xrb3ndnpM7ec3x+zO9Zqu7rk8+all9nZO3fOvTN753zv+Z7vEVJKiaIoiqIoiqIoiqKcp7Sz3QBFURRFURRFURRFORkqsFUURVEURVEURVHOayqwVRRFURRFURRFUc5rKrBVFEVRFEVRFEVRzmsqsFUURVEURVEURVHOayqwVRRFURRFURRFUc5rKrBVFEVRFEVRFEVRzmsqsFUURVEURVEURVHOayqwVRRFURRFURRFUc5rKrBVlLNg3bp1rFu37mw347zQ0NDAxz72sbPdDEVRFEU5bS7kfoEQgq985StnuxnKu4AKbN9FhBBT+vfCCy+ckfZEo1G+9rWvsWrVKgoLC/F4PNTX13P33Xfz+OOPn5E2XAim+r7+8z//M0IInn322XH3df/99yOE4JFHHpnwNV955RVuuukmZsyYgdfrpa6ujttuu40HHnjgVB+eoiiKcpqofsGF6wc/+EH+/XvllVdG/V5KycyZMxFCcOutt56FFirKqec62w1Qzpwf//jHI37+0Y9+xDPPPDPq8QULFpz2thw8eJD169fT3NzM7bffzkc+8hGCwSCtra088cQT3HrrrfzoRz/i937v9057W86Gp59++pTta6rv69q1a/niF7/IAw88wHXXXTfmvh544AFKS0u56aabxn29hx56iLvvvpvly5fz+c9/nuLiYo4cOcJLL73E/fffzz333HPyB3WMffv2oWnqHpyiKMqppvoF545T2S84ltfr5YEHHmDNmjUjHn/xxRdpa2vD4/Gcltc9ViqVwuVSIYdy+gkppTzbjVDOjs9+9rP8x3/8B2f6I2BZFitWrODIkSM89dRTrF69etQ2Tz/9NLZtTxhgnQ6JRIJAIHBGX/NUm+h9ve6669i8eTPd3d2jvsza29upq6vjD/7gD/jOd74z7v4XLVqEEIItW7bg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2223IaUccT7Xr1/P4OAgW7ZsAXLns62tbVTKuKKMR6UiK3nNzc3U1NQQCoVGPD5cDbG5uXnE43PmzBm1j7lz55JMJunt7R2RmnKsUChEf3//qMc//elP50vOH5+OdODAAbZv3055efmY++zp6Rnxc11d3Yifh7/Mjp8L43K5RqXTHjhwgMHBwXGLIA2/1lVXXcX73/9+/vqv/5pvfvObrFu3jve9733cc889J1xlcKrtPhk33XQTJSUlPPDAA/m5qz/72c9YtmwZixYtmtI+1q9fz/r160kmk7z11ls8+OCD/Od//ie33nore/fupaKiYsrncVhjY+OUXnuqn4VPf/rT/OIXv8gvS3TDDTdw1113ceONN07pdRRFUd7tVL/gndc6n/sF5eXlXHfddTzwwAMkk0ls2x4xB/ZY03nP7777bv6//+//o729nRkzZvDCCy/Q09PD3XffPW5bent7iUQifO973+N73/vemNsMn88///M/59lnn+WSSy5h9uzZ3HDDDdxzzz2TTplS3r1UYKuccfPnz+ftt9/OXwiHzZ07l7lz5wK58vTHchyH66+/nj/7sz8bc5/Dzxum6/qY28njil14PJ5RS8k4jkNFRQU//elPx9zH8JeoEIJf/vKXbNy4kUcffZSnnnqKj3/84/zTP/0TGzduHPPu82Sm2u6TYRgGd911F/fffz/d3d20tLRw4MABvv71r097X36/n7Vr17J27VrKysr467/+azZs2MBHP/rRKZ/HYVOtgDzVz0JFRQVvv/02Tz31FBs2bGDDhg38z//8Dx/5yEf44Q9/OI2jVBRFUU4n1S8Y36nqF9xzzz186lOfoquri5tuuik/unwy7r77br70pS/x0EMP8YUvfIFf/OIXFBYWTngDebiw14c//GE++tGPjrnN0qVLgVwwvW/fPh577DGefPJJfvWrX/Htb3+bv/qrv+Kv//qvT7r9yoVHBbZKXn19Pc8++yyxWGzEnbq9e/fmf3+sAwcOjNrH/v378fv9495BBbj11lv5+c9/zk9/+tNxv5CO19TURDweH3f91VOpqamJZ599ltWrV08p2Lrsssu47LLL+NrXvsYDDzzAvffey89//nM++clPnva2nqh7772X//zP/+TBBx/kyJEjCCH40Ic+dFL7XLVqFQCdnZ3A9M/jVE3ns+B2u7ntttu47bbbcByHT3/603z3u9/lL//yL5k9e/Ypa5OiKMqFSPUL3nmt871fcPvtt3PfffexcePGEenDx5vOe97Y2Mgll1zCgw8+yGc/+1l+/etf8773vW/C0eny8nJCoRC2bU/pvQsEAtx9993cfffdZLNZ7rjjDr72ta/xpS99adTNDkVRc2yVvJtvvhnbtvnWt7414vFvfvObCCFGldl//fXX8/MgAFpbW3n44Ye54YYbxr3DCLm5HgsXLuSrX/0qGzduHHOb4+9E3nXXXbz++us89dRTo7aNRCJYljXp8U3VXXfdhW3bfPWrXx31O8uyiEQiQC4N6Ph2Ll++HIBMJnPK2nM6rF69moaGBn7yk5/w4IMPctVVV01a4XjY7373uzEff+KJJwDy1Yyneh6na6qfhePT2jRNy98FPtffH0VRlHOB6he881rne78gGAzyne98h6985Svcdttt42433ff87rvvZuPGjXz/+9+nr69vwjRkyI1Av//97+dXv/oVO3fuHPX73t7e/P8//nvc7XazcOFCpJSnbA6zcmFRI7ZK3m233cbVV1/Nl7/8ZY4ePcqyZct4+umnefjhh/nCF75AU1PTiO0XL17M+vXrR5T1ByZNDzEMg9/85jf5cvp33HEHa9euJRAI0N7eziOPPEJLSwu33HJL/jlf/OIXeeSRR7j11lv52Mc+xsqVK0kkEuzYsYNf/vKXHD16lLKyslNyHq666iruu+8+/u7v/o63336bG264AcMwOHDgAA899BD/+q//yp133skPf/hDvv3tb3P77bfT1NRELBbj/vvvp6CggJtvvvmUtOV0EUJwzz338Ld/+7cA/M3f/M2Un/ve976XxsZGbrvtNpqamkgkEjz77LM8+uijXHzxxfkvzKmex+ma6mfhk5/8JAMDA1xzzTXU1tbS3NzMv//7v7N8+fL8XCFFURRlfKpfkHOh9AvGS/091nTf87vuuos//dM/5U//9E8pKSmZ0ijs3//93/P8889z6aWX8qlPfYqFCxcyMDDAli1bePbZZxkYGAByaxdXVVWxevVqKisr2bNnD9/61re45ZZbRs0BVhRALffzbjbWsjCxWEz+r//1v2RNTY00DEPOmTNH/uM//qN0HGfEdoD8zGc+I3/yk5/IOXPmSI/HI1esWCGff/75Kb9+JBKRf/M3fyNXrFghg8GgdLvdcubMmfLOO+8c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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Finding Predominant Streaming Service**"
      ],
      "metadata": {
        "id": "BUPye0P0QP5I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Write Your Code here\n",
        "import pandas as pd\n",
        "# Count the occurrences of each streaming service for movies\n",
        "top_streaming_services_movies = movies_dataframe['Streaming Service'].value_counts().reset_index()\n",
        "top_streaming_services_movies.columns = ['Streaming Service', 'Number of Movies']\n",
        "\n",
        "# Count the occurrences of each streaming service for TV series\n",
        "top_streaming_services_series = series_dataframe['Streaming Service'].value_counts().reset_index()\n",
        "top_streaming_services_series.columns = ['Streaming Service', 'Number of TV Series']\n",
        "\n",
        "# Display the top streaming services for movies\n",
        "top_streaming_services_movies.head()\n",
        "\n",
        "# # Display the top streaming services for TV series\n",
        "top_streaming_services_series.head()"
      ],
      "metadata": {
        "id": "cLXiCZSAO_40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a366b62a-8500-40fe-db53-2069ae8f8ceb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Streaming Service  Number of TV Series\n",
              "0                       Netflix                   32\n",
              "1            Amazon Prime Video                   15\n",
              "2                    Jio Cinema                   14\n",
              "3                       Hotstar                   13\n",
              "4  Streaming services not found                    7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1471ea4-6826-419a-ad64-8833406c00b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Streaming Service</th>\n",
              "      <th>Number of TV Series</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Netflix</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Amazon Prime Video</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Jio Cinema</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Hotstar</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Streaming services not found</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1471ea4-6826-419a-ad64-8833406c00b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b1471ea4-6826-419a-ad64-8833406c00b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b1471ea4-6826-419a-ad64-8833406c00b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91e4f7a2-bfdf-40f9-b96c-979581744d17\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91e4f7a2-bfdf-40f9-b96c-979581744d17')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91e4f7a2-bfdf-40f9-b96c-979581744d17 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_streaming_services_series",
              "summary": "{\n  \"name\": \"top_streaming_services_series\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"Streaming Service\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"MX Player\",\n          \"VI movies and tv\",\n          \"Netflix\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of TV Series\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1,\n        \"max\": 32,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2,\n          15,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Let's Visvalize it using word cloud\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Combine the streaming services from movies and TV series dataframes\n",
        "all_streaming_services = pd.concat([movies_dataframe['Streaming Service'], series_dataframe['Streaming Service']])\n",
        "\n",
        "# Create a WordCloud object\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(all_streaming_services.value_counts())\n",
        "\n",
        "# Display the generated word cloud using matplotlib\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "e0xdIO8APJYm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "3d079213-a71d-4bee-9237-c614a762fbf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 3 :- Data Export**"
      ],
      "metadata": {
        "id": "tytqsADVR2x6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#saving final dataframe as Final Data in csv format\n",
        "#saving final dataframe as Final Data in csv format\n",
        "movies_dataframe.to_csv('Final_Data_of_Movies.csv', index=False)\n",
        "series_dataframe.to_csv('Final_Data_of_Series.csv', index=False)\n",
        "\n",
        "# Display success messages\n",
        "print(\"Final Data of Movies saved successfully as 'Final_Data_of_Movies.csv'\")\n",
        "print(\"Final Data of Series saved successfully as 'Final_Data_of_Series.csv'\")"
      ],
      "metadata": {
        "id": "u4yaUlvrRj6g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a316773d-f39b-42e2-9fee-27f1d08961c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final Data of Movies saved successfully as 'Final_Data_of_Movies.csv'\n",
            "Final Data of Series saved successfully as 'Final_Data_of_Series.csv'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#saving filter data as Filter Data in csv format\n",
        "filtered_movies.to_csv('Filter_Data_of_Movies.csv', index=False)\n",
        "filtered_series.to_csv('Filter_Data_of_Series.csv', index=False)\n",
        "\n",
        "# Display success messages\n",
        "print(\"Filter Data of Movies saved successfully as 'Filter_Data_of_Movies.csv'\")\n",
        "print(\"Filter Data of Series saved successfully as 'Filter_Data_of_Series.csv'\")"
      ],
      "metadata": {
        "id": "SSmCEV22SSW_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b90499e5-c23e-4d8b-f5cb-c9e5ff458f9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Filter Data of Movies saved successfully as 'Filter_Data_of_Movies.csv'\n",
            "Filter Data of Series saved successfully as 'Filter_Data_of_Series.csv'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Dataset Drive Link (View Access with Anyone) -** https://colab.research.google.com/drive/18quswSibsZwbdpGZjwXtcU7e8_g13ueS?usp=sharing"
      ],
      "metadata": {
        "id": "j6F3wrlGWOcl"
      }
    }
  ]
}